/*
* generated by Xtext
*/

package org.caltoopia.frontend.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class CalGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AstTopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstTop");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAstPackageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAstNamespaceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// RVC compatibility layer
		/////////////////////////////////////////////////////////////////////////////////
		//AstTop:
		//	AstPackage | AstNamespace;
		public ParserRule getRule() { return rule; }

		//AstPackage | AstNamespace
		public Alternatives getAlternatives() { return cAlternatives; }

		//AstPackage
		public RuleCall getAstPackageParserRuleCall_0() { return cAstPackageParserRuleCall_0; }

		//AstNamespace
		public RuleCall getAstNamespaceParserRuleCall_1() { return cAstNamespaceParserRuleCall_1; }
	}

	public class AstPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstNamespaceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cEntitiesAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cEntitiesAstEntityParserRuleCall_4_0_0 = (RuleCall)cEntitiesAssignment_4_0.eContents().get(0);
		private final Assignment cImportsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_4_1_0 = (RuleCall)cImportsAssignment_4_1.eContents().get(0);
		private final Assignment cUnitsAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cUnitsAstUnitParserRuleCall_4_2_0 = (RuleCall)cUnitsAssignment_4_2.eContents().get(0);
		
		//AstPackage:
		//	{AstNamespace} "package" name=QualifiedName ";" (entities+=AstEntity | imports+=Import | units+=AstUnit)*;
		public ParserRule getRule() { return rule; }

		//{AstNamespace} "package" name=QualifiedName ";" (entities+=AstEntity | imports+=Import | units+=AstUnit)*
		public Group getGroup() { return cGroup; }

		//{AstNamespace}
		public Action getAstNamespaceAction_0() { return cAstNamespaceAction_0; }

		//"package"
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }

		//(entities+=AstEntity | imports+=Import | units+=AstUnit)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//entities+=AstEntity
		public Assignment getEntitiesAssignment_4_0() { return cEntitiesAssignment_4_0; }

		//AstEntity
		public RuleCall getEntitiesAstEntityParserRuleCall_4_0_0() { return cEntitiesAstEntityParserRuleCall_4_0_0; }

		//imports+=Import
		public Assignment getImportsAssignment_4_1() { return cImportsAssignment_4_1; }

		//Import
		public RuleCall getImportsImportParserRuleCall_4_1_0() { return cImportsImportParserRuleCall_4_1_0; }

		//units+=AstUnit
		public Assignment getUnitsAssignment_4_2() { return cUnitsAssignment_4_2; }

		//AstUnit
		public RuleCall getUnitsAstUnitParserRuleCall_4_2_0() { return cUnitsAstUnitParserRuleCall_4_2_0; }
	}

	public class AstUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstNamespaceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUnitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cFunctionsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cFunctionsAstFunctionParserRuleCall_4_0_0 = (RuleCall)cFunctionsAssignment_4_0.eContents().get(0);
		private final Assignment cVariablesAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cVariablesAstConstantVariableParserRuleCall_4_1_0 = (RuleCall)cVariablesAssignment_4_1.eContents().get(0);
		private final Assignment cExternalsAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final Alternatives cExternalsAlternatives_4_2_0 = (Alternatives)cExternalsAssignment_4_2.eContents().get(0);
		private final RuleCall cExternalsAstExternalVariableParserRuleCall_4_2_0_0 = (RuleCall)cExternalsAlternatives_4_2_0.eContents().get(0);
		private final RuleCall cExternalsAstExternalFunctionParserRuleCall_4_2_0_1 = (RuleCall)cExternalsAlternatives_4_2_0.eContents().get(1);
		private final RuleCall cExternalsAstExternalProcedureParserRuleCall_4_2_0_2 = (RuleCall)cExternalsAlternatives_4_2_0.eContents().get(2);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AstUnit:
		//	{AstNamespace} "unit" name=QualifiedName ":" (functions+=AstFunction | variables+=AstConstantVariable |
		//	externals+=(AstExternalVariable | AstExternalFunction | AstExternalProcedure))* "end";
		public ParserRule getRule() { return rule; }

		//{AstNamespace} "unit" name=QualifiedName ":" (functions+=AstFunction | variables+=AstConstantVariable |
		//externals+=(AstExternalVariable | AstExternalFunction | AstExternalProcedure))* "end"
		public Group getGroup() { return cGroup; }

		//{AstNamespace}
		public Action getAstNamespaceAction_0() { return cAstNamespaceAction_0; }

		//"unit"
		public Keyword getUnitKeyword_1() { return cUnitKeyword_1; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//(functions+=AstFunction | variables+=AstConstantVariable | externals+=(AstExternalVariable | AstExternalFunction |
		//AstExternalProcedure))*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//functions+=AstFunction
		public Assignment getFunctionsAssignment_4_0() { return cFunctionsAssignment_4_0; }

		//AstFunction
		public RuleCall getFunctionsAstFunctionParserRuleCall_4_0_0() { return cFunctionsAstFunctionParserRuleCall_4_0_0; }

		//variables+=AstConstantVariable
		public Assignment getVariablesAssignment_4_1() { return cVariablesAssignment_4_1; }

		//AstConstantVariable
		public RuleCall getVariablesAstConstantVariableParserRuleCall_4_1_0() { return cVariablesAstConstantVariableParserRuleCall_4_1_0; }

		//externals+=(AstExternalVariable | AstExternalFunction | AstExternalProcedure)
		public Assignment getExternalsAssignment_4_2() { return cExternalsAssignment_4_2; }

		//AstExternalVariable | AstExternalFunction | AstExternalProcedure
		public Alternatives getExternalsAlternatives_4_2_0() { return cExternalsAlternatives_4_2_0; }

		//AstExternalVariable
		public RuleCall getExternalsAstExternalVariableParserRuleCall_4_2_0_0() { return cExternalsAstExternalVariableParserRuleCall_4_2_0_0; }

		//AstExternalFunction
		public RuleCall getExternalsAstExternalFunctionParserRuleCall_4_2_0_1() { return cExternalsAstExternalFunctionParserRuleCall_4_2_0_1; }

		//AstExternalProcedure
		public RuleCall getExternalsAstExternalProcedureParserRuleCall_4_2_0_2() { return cExternalsAstExternalProcedureParserRuleCall_4_2_0_2; }

		//"end"
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}

	public class AstNamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstNamespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cNamespaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cFunctionsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cFunctionsAstFunctionParserRuleCall_4_0_0 = (RuleCall)cFunctionsAssignment_4_0.eContents().get(0);
		private final Assignment cVariablesAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cVariablesAstConstantVariableParserRuleCall_4_1_0 = (RuleCall)cVariablesAssignment_4_1.eContents().get(0);
		private final Assignment cExternalsAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final Alternatives cExternalsAlternatives_4_2_0 = (Alternatives)cExternalsAssignment_4_2.eContents().get(0);
		private final RuleCall cExternalsAstExternalVariableParserRuleCall_4_2_0_0 = (RuleCall)cExternalsAlternatives_4_2_0.eContents().get(0);
		private final RuleCall cExternalsAstExternalFunctionParserRuleCall_4_2_0_1 = (RuleCall)cExternalsAlternatives_4_2_0.eContents().get(1);
		private final RuleCall cExternalsAstExternalProcedureParserRuleCall_4_2_0_2 = (RuleCall)cExternalsAlternatives_4_2_0.eContents().get(2);
		private final Assignment cTypedefsAssignment_4_3 = (Assignment)cAlternatives_4.eContents().get(3);
		private final RuleCall cTypedefsAstTypeDefinitionParserRuleCall_4_3_0 = (RuleCall)cTypedefsAssignment_4_3.eContents().get(0);
		private final Assignment cImportsAssignment_4_4 = (Assignment)cAlternatives_4.eContents().get(4);
		private final RuleCall cImportsImportParserRuleCall_4_4_0 = (RuleCall)cImportsAssignment_4_4.eContents().get(0);
		private final Assignment cEntitiesAssignment_4_5 = (Assignment)cAlternatives_4.eContents().get(5);
		private final RuleCall cEntitiesAstEntityParserRuleCall_4_5_0 = (RuleCall)cEntitiesAssignment_4_5.eContents().get(0);
		private final Assignment cNamespacesAssignment_4_6 = (Assignment)cAlternatives_4.eContents().get(6);
		private final RuleCall cNamespacesAstNamespaceParserRuleCall_4_6_0 = (RuleCall)cNamespacesAssignment_4_6.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// namespace
		/////////////////////////////////////////////////////////////////////////////////
		//AstNamespace:
		//	annotations+=AstAnnotation* "namespace" name=QualifiedName ":" (functions+=AstFunction |
		//	variables+=AstConstantVariable | externals+=(AstExternalVariable | AstExternalFunction | AstExternalProcedure) |
		//	typedefs+=AstTypeDefinition | imports+=Import | entities+=AstEntity | namespaces+=AstNamespace)* "end";
		public ParserRule getRule() { return rule; }

		//annotations+=AstAnnotation* "namespace" name=QualifiedName ":" (functions+=AstFunction | variables+=AstConstantVariable
		//| externals+=(AstExternalVariable | AstExternalFunction | AstExternalProcedure) | typedefs+=AstTypeDefinition |
		//imports+=Import | entities+=AstEntity | namespaces+=AstNamespace)* "end"
		public Group getGroup() { return cGroup; }

		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_0_0() { return cAnnotationsAstAnnotationParserRuleCall_0_0; }

		//"namespace"
		public Keyword getNamespaceKeyword_1() { return cNamespaceKeyword_1; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//(functions+=AstFunction | variables+=AstConstantVariable | externals+=(AstExternalVariable | AstExternalFunction |
		//AstExternalProcedure) | typedefs+=AstTypeDefinition | imports+=Import | entities+=AstEntity |
		//namespaces+=AstNamespace)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//functions+=AstFunction
		public Assignment getFunctionsAssignment_4_0() { return cFunctionsAssignment_4_0; }

		//AstFunction
		public RuleCall getFunctionsAstFunctionParserRuleCall_4_0_0() { return cFunctionsAstFunctionParserRuleCall_4_0_0; }

		//variables+=AstConstantVariable
		public Assignment getVariablesAssignment_4_1() { return cVariablesAssignment_4_1; }

		//AstConstantVariable
		public RuleCall getVariablesAstConstantVariableParserRuleCall_4_1_0() { return cVariablesAstConstantVariableParserRuleCall_4_1_0; }

		//externals+=(AstExternalVariable | AstExternalFunction | AstExternalProcedure)
		public Assignment getExternalsAssignment_4_2() { return cExternalsAssignment_4_2; }

		//AstExternalVariable | AstExternalFunction | AstExternalProcedure
		public Alternatives getExternalsAlternatives_4_2_0() { return cExternalsAlternatives_4_2_0; }

		//AstExternalVariable
		public RuleCall getExternalsAstExternalVariableParserRuleCall_4_2_0_0() { return cExternalsAstExternalVariableParserRuleCall_4_2_0_0; }

		//AstExternalFunction
		public RuleCall getExternalsAstExternalFunctionParserRuleCall_4_2_0_1() { return cExternalsAstExternalFunctionParserRuleCall_4_2_0_1; }

		//AstExternalProcedure
		public RuleCall getExternalsAstExternalProcedureParserRuleCall_4_2_0_2() { return cExternalsAstExternalProcedureParserRuleCall_4_2_0_2; }

		//typedefs+=AstTypeDefinition
		public Assignment getTypedefsAssignment_4_3() { return cTypedefsAssignment_4_3; }

		//AstTypeDefinition
		public RuleCall getTypedefsAstTypeDefinitionParserRuleCall_4_3_0() { return cTypedefsAstTypeDefinitionParserRuleCall_4_3_0; }

		//imports+=Import
		public Assignment getImportsAssignment_4_4() { return cImportsAssignment_4_4; }

		//Import
		public RuleCall getImportsImportParserRuleCall_4_4_0() { return cImportsImportParserRuleCall_4_4_0; }

		//entities+=AstEntity
		public Assignment getEntitiesAssignment_4_5() { return cEntitiesAssignment_4_5; }

		//AstEntity
		public RuleCall getEntitiesAstEntityParserRuleCall_4_5_0() { return cEntitiesAstEntityParserRuleCall_4_5_0; }

		//namespaces+=AstNamespace
		public Assignment getNamespacesAssignment_4_6() { return cNamespacesAssignment_4_6; }

		//AstNamespace
		public RuleCall getNamespacesAstNamespaceParserRuleCall_4_6_0() { return cNamespacesAstNamespaceParserRuleCall_4_6_0; }

		//"end"
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}

	public class AstEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cActorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActorAstAbstractActorParserRuleCall_1_0 = (RuleCall)cActorAssignment_1.eContents().get(0);
		
		//AstEntity:
		//	annotations+=AstAnnotation* actor=AstAbstractActor;
		public ParserRule getRule() { return rule; }

		//annotations+=AstAnnotation* actor=AstAbstractActor
		public Group getGroup() { return cGroup; }

		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_0_0() { return cAnnotationsAstAnnotationParserRuleCall_0_0; }

		//actor=AstAbstractActor
		public Assignment getActorAssignment_1() { return cActorAssignment_1; }

		//AstAbstractActor
		public RuleCall getActorAstAbstractActorParserRuleCall_1_0() { return cActorAstAbstractActorParserRuleCall_1_0; }
	}

	public class AstAbstractActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstAbstractActor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAstActorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAstNetworkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAstExternalActorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AstAbstractActor:
		//	AstActor | AstNetwork | AstExternalActor;
		public ParserRule getRule() { return rule; }

		//AstActor | AstNetwork | AstExternalActor
		public Alternatives getAlternatives() { return cAlternatives; }

		//AstActor
		public RuleCall getAstActorParserRuleCall_0() { return cAstActorParserRuleCall_0; }

		//AstNetwork
		public RuleCall getAstNetworkParserRuleCall_1() { return cAstNetworkParserRuleCall_1; }

		//AstExternalActor
		public RuleCall getAstExternalActorParserRuleCall_2() { return cAstExternalActorParserRuleCall_2; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildCard ";";
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildCard ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildCard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class AstNetworkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstNetwork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstNetworkAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNetworkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersAstParameterParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersAstParameterParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cInputsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cInputsAstPortParserRuleCall_6_0_0 = (RuleCall)cInputsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cInputsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cInputsAstPortParserRuleCall_6_1_1_0 = (RuleCall)cInputsAssignment_6_1_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cOutputsAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cOutputsAstPortParserRuleCall_8_0_0 = (RuleCall)cOutputsAssignment_8_0.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Keyword cCommaKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cOutputsAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cOutputsAstPortParserRuleCall_8_1_1_0 = (RuleCall)cOutputsAssignment_8_1_1.eContents().get(0);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cVarKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cVariablesAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_10_1_0 = (RuleCall)cVariablesAssignment_10_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Group cGroup_10_3 = (Group)cGroup_10.eContents().get(3);
		private final Assignment cVariablesAssignment_10_3_0 = (Assignment)cGroup_10_3.eContents().get(0);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_10_3_0_0 = (RuleCall)cVariablesAssignment_10_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_10_3_1 = (Keyword)cGroup_10_3.eContents().get(1);
		private final Keyword cEntitiesKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cInstancesAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cInstancesAstActorDeclarationParserRuleCall_12_0 = (RuleCall)cInstancesAssignment_12.eContents().get(0);
		private final Assignment cStructureAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cStructureAstStructureParserRuleCall_13_0 = (RuleCall)cStructureAssignment_13.eContents().get(0);
		private final Keyword cEndKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// network
		/////////////////////////////////////////////////////////////////////////////////
		//AstNetwork:
		//	{AstNetwork} "network" name=ID "(" (parameters+=AstParameter ("," parameters+=AstParameter)*)? ")" (inputs+=AstPort
		//	("," inputs+=AstPort)*)? "==>" (outputs+=AstPort ("," outputs+=AstPort)*)? ":" ("var"
		//	variables+=AstValuedVariableDeclaration ";" (variables+=AstValuedVariableDeclaration ";")*)? "entities"
		//	instances+=AstActorDeclaration+ structure=AstStructure "end";
		public ParserRule getRule() { return rule; }

		//{AstNetwork} "network" name=ID "(" (parameters+=AstParameter ("," parameters+=AstParameter)*)? ")" (inputs+=AstPort (","
		//inputs+=AstPort)*)? "==>" (outputs+=AstPort ("," outputs+=AstPort)*)? ":" ("var"
		//variables+=AstValuedVariableDeclaration ";" (variables+=AstValuedVariableDeclaration ";")*)? "entities"
		//instances+=AstActorDeclaration+ structure=AstStructure "end"
		public Group getGroup() { return cGroup; }

		//{AstNetwork}
		public Action getAstNetworkAction_0() { return cAstNetworkAction_0; }

		//"network"
		public Keyword getNetworkKeyword_1() { return cNetworkKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(parameters+=AstParameter ("," parameters+=AstParameter)*)?
		public Group getGroup_4() { return cGroup_4; }

		//parameters+=AstParameter
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }

		//AstParameter
		public RuleCall getParametersAstParameterParserRuleCall_4_0_0() { return cParametersAstParameterParserRuleCall_4_0_0; }

		//("," parameters+=AstParameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//parameters+=AstParameter
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }

		//AstParameter
		public RuleCall getParametersAstParameterParserRuleCall_4_1_1_0() { return cParametersAstParameterParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//(inputs+=AstPort ("," inputs+=AstPort)*)?
		public Group getGroup_6() { return cGroup_6; }

		//inputs+=AstPort
		public Assignment getInputsAssignment_6_0() { return cInputsAssignment_6_0; }

		//AstPort
		public RuleCall getInputsAstPortParserRuleCall_6_0_0() { return cInputsAstPortParserRuleCall_6_0_0; }

		//("," inputs+=AstPort)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//inputs+=AstPort
		public Assignment getInputsAssignment_6_1_1() { return cInputsAssignment_6_1_1; }

		//AstPort
		public RuleCall getInputsAstPortParserRuleCall_6_1_1_0() { return cInputsAstPortParserRuleCall_6_1_1_0; }

		//"==>"
		public Keyword getEqualsSignEqualsSignGreaterThanSignKeyword_7() { return cEqualsSignEqualsSignGreaterThanSignKeyword_7; }

		//(outputs+=AstPort ("," outputs+=AstPort)*)?
		public Group getGroup_8() { return cGroup_8; }

		//outputs+=AstPort
		public Assignment getOutputsAssignment_8_0() { return cOutputsAssignment_8_0; }

		//AstPort
		public RuleCall getOutputsAstPortParserRuleCall_8_0_0() { return cOutputsAstPortParserRuleCall_8_0_0; }

		//("," outputs+=AstPort)*
		public Group getGroup_8_1() { return cGroup_8_1; }

		//","
		public Keyword getCommaKeyword_8_1_0() { return cCommaKeyword_8_1_0; }

		//outputs+=AstPort
		public Assignment getOutputsAssignment_8_1_1() { return cOutputsAssignment_8_1_1; }

		//AstPort
		public RuleCall getOutputsAstPortParserRuleCall_8_1_1_0() { return cOutputsAstPortParserRuleCall_8_1_1_0; }

		//":"
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }

		//("var" variables+=AstValuedVariableDeclaration ";" (variables+=AstValuedVariableDeclaration ";")*)?
		public Group getGroup_10() { return cGroup_10; }

		//"var"
		public Keyword getVarKeyword_10_0() { return cVarKeyword_10_0; }

		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_10_1() { return cVariablesAssignment_10_1; }

		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_10_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_10_1_0; }

		//";"
		public Keyword getSemicolonKeyword_10_2() { return cSemicolonKeyword_10_2; }

		//(variables+=AstValuedVariableDeclaration ";")*
		public Group getGroup_10_3() { return cGroup_10_3; }

		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_10_3_0() { return cVariablesAssignment_10_3_0; }

		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_10_3_0_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_10_3_0_0; }

		//";"
		public Keyword getSemicolonKeyword_10_3_1() { return cSemicolonKeyword_10_3_1; }

		//"entities"
		public Keyword getEntitiesKeyword_11() { return cEntitiesKeyword_11; }

		//instances+=AstActorDeclaration+
		public Assignment getInstancesAssignment_12() { return cInstancesAssignment_12; }

		//AstActorDeclaration
		public RuleCall getInstancesAstActorDeclarationParserRuleCall_12_0() { return cInstancesAstActorDeclarationParserRuleCall_12_0; }

		//structure=AstStructure
		public Assignment getStructureAssignment_13() { return cStructureAssignment_13; }

		//AstStructure
		public RuleCall getStructureAstStructureParserRuleCall_13_0() { return cStructureAstStructureParserRuleCall_13_0; }

		//"end"
		public Keyword getEndKeyword_14() { return cEndKeyword_14; }
	}

	public class AstActorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstActorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeAstEntityCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeAstEntityQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTypeAstEntityCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersAstAssignParameterParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersAstAssignParameterParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AstActorDeclaration returns AstActorVariable:
		//	name=ID "=" type=[AstEntity|QualifiedName] "(" (parameters+=AstAssignParameter ("," parameters+=AstAssignParameter)*)?
		//	")" ";";
		public ParserRule getRule() { return rule; }

		//name=ID "=" type=[AstEntity|QualifiedName] "(" (parameters+=AstAssignParameter ("," parameters+=AstAssignParameter)*)?
		//")" ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//type=[AstEntity|QualifiedName]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[AstEntity|QualifiedName]
		public CrossReference getTypeAstEntityCrossReference_2_0() { return cTypeAstEntityCrossReference_2_0; }

		//QualifiedName
		public RuleCall getTypeAstEntityQualifiedNameParserRuleCall_2_0_1() { return cTypeAstEntityQualifiedNameParserRuleCall_2_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(parameters+=AstAssignParameter ("," parameters+=AstAssignParameter)*)?
		public Group getGroup_4() { return cGroup_4; }

		//parameters+=AstAssignParameter
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }

		//AstAssignParameter
		public RuleCall getParametersAstAssignParameterParserRuleCall_4_0_0() { return cParametersAstAssignParameterParserRuleCall_4_0_0; }

		//("," parameters+=AstAssignParameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//parameters+=AstAssignParameter
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }

		//AstAssignParameter
		public RuleCall getParametersAstAssignParameterParserRuleCall_4_1_1_0() { return cParametersAstAssignParameterParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class AstAssignParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstAssignParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAstExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//AstAssignParameter:
		//	name=ID "=" value=AstExpression;
		public ParserRule getRule() { return rule; }

		//name=ID "=" value=AstExpression
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=AstExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//AstExpression
		public RuleCall getValueAstExpressionParserRuleCall_2_0() { return cValueAstExpressionParserRuleCall_2_0; }
	}

	public class AstStructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstStructure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConnectionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConnectionsAstConnectionParserRuleCall_1_0 = (RuleCall)cConnectionsAssignment_1.eContents().get(0);
		
		//AstStructure:
		//	"structure" connections+=AstConnection+;
		public ParserRule getRule() { return rule; }

		//"structure" connections+=AstConnection+
		public Group getGroup() { return cGroup; }

		//"structure"
		public Keyword getStructureKeyword_0() { return cStructureKeyword_0; }

		//connections+=AstConnection+
		public Assignment getConnectionsAssignment_1() { return cConnectionsAssignment_1; }

		//AstConnection
		public RuleCall getConnectionsAstConnectionParserRuleCall_1_0() { return cConnectionsAstConnectionParserRuleCall_1_0; }
	}

	public class AstConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstConnection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cFromAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFromAstActorVariableReferenceParserRuleCall_0_0_0 = (RuleCall)cFromAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOutPortAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOutPortIDTerminalRuleCall_1_0 = (RuleCall)cOutPortAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cToAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cToAstActorVariableReferenceParserRuleCall_3_0_0 = (RuleCall)cToAssignment_3_0.eContents().get(0);
		private final Keyword cFullStopKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cInPortAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInPortIDTerminalRuleCall_4_0 = (RuleCall)cInPortAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAttributeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAttributeAstConnectionAttributeParserRuleCall_5_1_0 = (RuleCall)cAttributeAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AstConnection:
		//	(from=AstActorVariableReference ".")? outPort=ID "-->" (to=AstActorVariableReference ".")? inPort=ID ("{"
		//	attribute+=AstConnectionAttribute* "}")? ";";
		public ParserRule getRule() { return rule; }

		//(from=AstActorVariableReference ".")? outPort=ID "-->" (to=AstActorVariableReference ".")? inPort=ID ("{"
		//attribute+=AstConnectionAttribute* "}")? ";"
		public Group getGroup() { return cGroup; }

		//(from=AstActorVariableReference ".")?
		public Group getGroup_0() { return cGroup_0; }

		//from=AstActorVariableReference
		public Assignment getFromAssignment_0_0() { return cFromAssignment_0_0; }

		//AstActorVariableReference
		public RuleCall getFromAstActorVariableReferenceParserRuleCall_0_0_0() { return cFromAstActorVariableReferenceParserRuleCall_0_0_0; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//outPort=ID
		public Assignment getOutPortAssignment_1() { return cOutPortAssignment_1; }

		//ID
		public RuleCall getOutPortIDTerminalRuleCall_1_0() { return cOutPortIDTerminalRuleCall_1_0; }

		//"-->"
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_2; }

		//(to=AstActorVariableReference ".")?
		public Group getGroup_3() { return cGroup_3; }

		//to=AstActorVariableReference
		public Assignment getToAssignment_3_0() { return cToAssignment_3_0; }

		//AstActorVariableReference
		public RuleCall getToAstActorVariableReferenceParserRuleCall_3_0_0() { return cToAstActorVariableReferenceParserRuleCall_3_0_0; }

		//"."
		public Keyword getFullStopKeyword_3_1() { return cFullStopKeyword_3_1; }

		//inPort=ID
		public Assignment getInPortAssignment_4() { return cInPortAssignment_4; }

		//ID
		public RuleCall getInPortIDTerminalRuleCall_4_0() { return cInPortIDTerminalRuleCall_4_0; }

		//("{" attribute+=AstConnectionAttribute* "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }

		//attribute+=AstConnectionAttribute*
		public Assignment getAttributeAssignment_5_1() { return cAttributeAssignment_5_1; }

		//AstConnectionAttribute
		public RuleCall getAttributeAstConnectionAttributeParserRuleCall_5_1_0() { return cAttributeAstConnectionAttributeParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class AstActorVariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstActorVariableReference");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVariableAstActorVariableCrossReference_0 = (CrossReference)cVariableAssignment.eContents().get(0);
		private final RuleCall cVariableAstActorVariableIDTerminalRuleCall_0_1 = (RuleCall)cVariableAstActorVariableCrossReference_0.eContents().get(1);
		
		//AstActorVariableReference:
		//	variable=[AstActorVariable];
		public ParserRule getRule() { return rule; }

		//variable=[AstActorVariable]
		public Assignment getVariableAssignment() { return cVariableAssignment; }

		//[AstActorVariable]
		public CrossReference getVariableAstActorVariableCrossReference_0() { return cVariableAstActorVariableCrossReference_0; }

		//ID
		public RuleCall getVariableAstActorVariableIDTerminalRuleCall_0_1() { return cVariableAstActorVariableIDTerminalRuleCall_0_1; }
	}

	public class AstConnectionAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstConnectionAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAstExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AstConnectionAttribute:
		//	name=ID "=" value=AstExpression ";";
		public ParserRule getRule() { return rule; }

		//name=ID "=" value=AstExpression ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=AstExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//AstExpression
		public RuleCall getValueAstExpressionParserRuleCall_2_0() { return cValueAstExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class AstConstantVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstConstantVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstVariableDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cConstantAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cConstantEqualsSignKeyword_1_0 = (Keyword)cConstantAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAstExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AstConstantVariable returns AstVariable:
		//	AstVariableDeclaration constant?="=" value=AstExpression ";";
		public ParserRule getRule() { return rule; }

		//AstVariableDeclaration constant?="=" value=AstExpression ";"
		public Group getGroup() { return cGroup; }

		//AstVariableDeclaration
		public RuleCall getAstVariableDeclarationParserRuleCall_0() { return cAstVariableDeclarationParserRuleCall_0; }

		//constant?="="
		public Assignment getConstantAssignment_1() { return cConstantAssignment_1; }

		//"="
		public Keyword getConstantEqualsSignKeyword_1_0() { return cConstantEqualsSignKeyword_1_0; }

		//value=AstExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//AstExpression
		public RuleCall getValueAstExpressionParserRuleCall_2_0() { return cValueAstExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class AstExternalVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstExternalVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExternalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAstVariableDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AstExternalVariable returns AstVariable:
		//	"external" AstVariableDeclaration ";";
		public ParserRule getRule() { return rule; }

		//"external" AstVariableDeclaration ";"
		public Group getGroup() { return cGroup; }

		//"external"
		public Keyword getExternalKeyword_0() { return cExternalKeyword_0; }

		//AstVariableDeclaration
		public RuleCall getAstVariableDeclarationParserRuleCall_1() { return cAstVariableDeclarationParserRuleCall_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class AstTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefinitionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDefinitionTypeKeyword_0_0 = (Keyword)cDefinitionAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParametersAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParametersAstTypeDefinitionParameterParserRuleCall_2_1_0_0 = (RuleCall)cParametersAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParametersAstTypeDefinitionParameterParserRuleCall_2_1_1_1_0 = (RuleCall)cParametersAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTuplesAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cTuplesAstTupleParserRuleCall_4_0_0 = (RuleCall)cTuplesAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Assignment cTuplesAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cTuplesAstTaggedTupleParserRuleCall_4_1_0_0 = (RuleCall)cTuplesAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cVerticalLineKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cTuplesAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cTuplesAstTaggedTupleParserRuleCall_4_1_1_1_0 = (RuleCall)cTuplesAssignment_4_1_1_1.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// type definitions
		/////////////////////////////////////////////////////////////////////////////////
		//AstTypeDefinition returns AstTypeUser:
		//	definition?="type" name=ID ("(" (parameters+=AstTypeDefinitionParameter (","
		//	parameters+=AstTypeDefinitionParameter)*)? ")")? ":" (tuples+=AstTuple | tuples+=AstTaggedTuple ("|"
		//	tuples+=AstTaggedTuple)*) "end";
		public ParserRule getRule() { return rule; }

		//definition?="type" name=ID ("(" (parameters+=AstTypeDefinitionParameter ("," parameters+=AstTypeDefinitionParameter)*)?
		//")")? ":" (tuples+=AstTuple | tuples+=AstTaggedTuple ("|" tuples+=AstTaggedTuple)*) "end"
		public Group getGroup() { return cGroup; }

		//definition?="type"
		public Assignment getDefinitionAssignment_0() { return cDefinitionAssignment_0; }

		//"type"
		public Keyword getDefinitionTypeKeyword_0_0() { return cDefinitionTypeKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("(" (parameters+=AstTypeDefinitionParameter ("," parameters+=AstTypeDefinitionParameter)*)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//(parameters+=AstTypeDefinitionParameter ("," parameters+=AstTypeDefinitionParameter)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//parameters+=AstTypeDefinitionParameter
		public Assignment getParametersAssignment_2_1_0() { return cParametersAssignment_2_1_0; }

		//AstTypeDefinitionParameter
		public RuleCall getParametersAstTypeDefinitionParameterParserRuleCall_2_1_0_0() { return cParametersAstTypeDefinitionParameterParserRuleCall_2_1_0_0; }

		//("," parameters+=AstTypeDefinitionParameter)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//parameters+=AstTypeDefinitionParameter
		public Assignment getParametersAssignment_2_1_1_1() { return cParametersAssignment_2_1_1_1; }

		//AstTypeDefinitionParameter
		public RuleCall getParametersAstTypeDefinitionParameterParserRuleCall_2_1_1_1_0() { return cParametersAstTypeDefinitionParameterParserRuleCall_2_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//tuples+=AstTuple | tuples+=AstTaggedTuple ("|" tuples+=AstTaggedTuple)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//tuples+=AstTuple
		public Assignment getTuplesAssignment_4_0() { return cTuplesAssignment_4_0; }

		//AstTuple
		public RuleCall getTuplesAstTupleParserRuleCall_4_0_0() { return cTuplesAstTupleParserRuleCall_4_0_0; }

		//tuples+=AstTaggedTuple ("|" tuples+=AstTaggedTuple)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//tuples+=AstTaggedTuple
		public Assignment getTuplesAssignment_4_1_0() { return cTuplesAssignment_4_1_0; }

		//AstTaggedTuple
		public RuleCall getTuplesAstTaggedTupleParserRuleCall_4_1_0_0() { return cTuplesAstTaggedTupleParserRuleCall_4_1_0_0; }

		//("|" tuples+=AstTaggedTuple)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//"|"
		public Keyword getVerticalLineKeyword_4_1_1_0() { return cVerticalLineKeyword_4_1_1_0; }

		//tuples+=AstTaggedTuple
		public Assignment getTuplesAssignment_4_1_1_1() { return cTuplesAssignment_4_1_1_1; }

		//AstTaggedTuple
		public RuleCall getTuplesAstTaggedTupleParserRuleCall_4_1_1_1_0() { return cTuplesAstTaggedTupleParserRuleCall_4_1_1_1_0; }

		//"end"
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}

	public class AstTypeDefinitionParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstTypeDefinitionParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueAstVariableDeclarationParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeAstTypeDefinitionTypeParameterParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//AstTypeDefinitionParameter:
		//	value=AstVariableDeclaration | type=AstTypeDefinitionTypeParameter;
		public ParserRule getRule() { return rule; }

		//value=AstVariableDeclaration | type=AstTypeDefinitionTypeParameter
		public Alternatives getAlternatives() { return cAlternatives; }

		//value=AstVariableDeclaration
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//AstVariableDeclaration
		public RuleCall getValueAstVariableDeclarationParserRuleCall_0_0() { return cValueAstVariableDeclarationParserRuleCall_0_0; }

		//type=AstTypeDefinitionTypeParameter
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//AstTypeDefinitionTypeParameter
		public RuleCall getTypeAstTypeDefinitionTypeParameterParserRuleCall_1_0() { return cTypeAstTypeDefinitionTypeParameterParserRuleCall_1_0; }
	}

	public class AstTypeDefinitionTypeParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstTypeDefinitionTypeParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cVariableTypeKeyword_0_0 = (Keyword)cVariableAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//AstTypeDefinitionTypeParameter returns AstTypeUser:
		//	variable?="type" name=ID;
		public ParserRule getRule() { return rule; }

		//variable?="type" name=ID
		public Group getGroup() { return cGroup; }

		//variable?="type"
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//"type"
		public Keyword getVariableTypeKeyword_0_0() { return cVariableTypeKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class AstTaggedTupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstTaggedTuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cFieldsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cFieldsAstValuedVariableDeclarationParserRuleCall_1_1_0_0 = (RuleCall)cFieldsAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cFieldsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cFieldsAstValuedVariableDeclarationParserRuleCall_1_1_1_1_0 = (RuleCall)cFieldsAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//AstTaggedTuple:
		//	name=ID ("(" (fields+=AstValuedVariableDeclaration ("," fields+=AstValuedVariableDeclaration)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//name=ID ("(" (fields+=AstValuedVariableDeclaration ("," fields+=AstValuedVariableDeclaration)*)? ")")?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("(" (fields+=AstValuedVariableDeclaration ("," fields+=AstValuedVariableDeclaration)*)? ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//(fields+=AstValuedVariableDeclaration ("," fields+=AstValuedVariableDeclaration)*)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//fields+=AstValuedVariableDeclaration
		public Assignment getFieldsAssignment_1_1_0() { return cFieldsAssignment_1_1_0; }

		//AstValuedVariableDeclaration
		public RuleCall getFieldsAstValuedVariableDeclarationParserRuleCall_1_1_0_0() { return cFieldsAstValuedVariableDeclarationParserRuleCall_1_1_0_0; }

		//("," fields+=AstValuedVariableDeclaration)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//fields+=AstValuedVariableDeclaration
		public Assignment getFieldsAssignment_1_1_1_1() { return cFieldsAssignment_1_1_1_1; }

		//AstValuedVariableDeclaration
		public RuleCall getFieldsAstValuedVariableDeclarationParserRuleCall_1_1_1_1_0() { return cFieldsAstValuedVariableDeclarationParserRuleCall_1_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class AstTupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstTuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstTupleAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cFieldsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cFieldsAstValuedVariableDeclarationParserRuleCall_1_1_0_0 = (RuleCall)cFieldsAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cFieldsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cFieldsAstValuedVariableDeclarationParserRuleCall_1_1_1_1_0 = (RuleCall)cFieldsAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//AstTuple returns AstTaggedTuple:
		//	{AstTuple} ("(" (fields+=AstValuedVariableDeclaration ("," fields+=AstValuedVariableDeclaration)*)? ")");
		public ParserRule getRule() { return rule; }

		//{AstTuple} ("(" (fields+=AstValuedVariableDeclaration ("," fields+=AstValuedVariableDeclaration)*)? ")")
		public Group getGroup() { return cGroup; }

		//{AstTuple}
		public Action getAstTupleAction_0() { return cAstTupleAction_0; }

		//"(" (fields+=AstValuedVariableDeclaration ("," fields+=AstValuedVariableDeclaration)*)? ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//(fields+=AstValuedVariableDeclaration ("," fields+=AstValuedVariableDeclaration)*)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//fields+=AstValuedVariableDeclaration
		public Assignment getFieldsAssignment_1_1_0() { return cFieldsAssignment_1_1_0; }

		//AstValuedVariableDeclaration
		public RuleCall getFieldsAstValuedVariableDeclarationParserRuleCall_1_1_0_0() { return cFieldsAstValuedVariableDeclarationParserRuleCall_1_1_0_0; }

		//("," fields+=AstValuedVariableDeclaration)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//fields+=AstValuedVariableDeclaration
		public Assignment getFieldsAssignment_1_1_1_1() { return cFieldsAssignment_1_1_1_1; }

		//AstValuedVariableDeclaration
		public RuleCall getFieldsAstValuedVariableDeclarationParserRuleCall_1_1_1_1_0() { return cFieldsAstValuedVariableDeclarationParserRuleCall_1_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class AstActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstActorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersAstParameterParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersAstParameterParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cInputsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cInputsAstPortParserRuleCall_6_0_0 = (RuleCall)cInputsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cInputsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cInputsAstPortParserRuleCall_6_1_1_0 = (RuleCall)cInputsAssignment_6_1_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cOutputsAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cOutputsAstPortParserRuleCall_8_0_0 = (RuleCall)cOutputsAssignment_8_0.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Keyword cCommaKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cOutputsAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cOutputsAstPortParserRuleCall_8_1_1_0 = (RuleCall)cOutputsAssignment_8_1_1.eContents().get(0);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Alternatives cAlternatives_10 = (Alternatives)cGroup.eContents().get(10);
		private final Assignment cFunctionsAssignment_10_0 = (Assignment)cAlternatives_10.eContents().get(0);
		private final RuleCall cFunctionsAstFunctionParserRuleCall_10_0_0 = (RuleCall)cFunctionsAssignment_10_0.eContents().get(0);
		private final Assignment cProceduresAssignment_10_1 = (Assignment)cAlternatives_10.eContents().get(1);
		private final RuleCall cProceduresAstProcedureParserRuleCall_10_1_0 = (RuleCall)cProceduresAssignment_10_1.eContents().get(0);
		private final Assignment cActionsAssignment_10_2 = (Assignment)cAlternatives_10.eContents().get(2);
		private final RuleCall cActionsAstActionParserRuleCall_10_2_0 = (RuleCall)cActionsAssignment_10_2.eContents().get(0);
		private final Assignment cInitializesAssignment_10_3 = (Assignment)cAlternatives_10.eContents().get(3);
		private final RuleCall cInitializesAstInitializeParserRuleCall_10_3_0 = (RuleCall)cInitializesAssignment_10_3.eContents().get(0);
		private final Assignment cStateVariablesAssignment_10_4 = (Assignment)cAlternatives_10.eContents().get(4);
		private final RuleCall cStateVariablesAstStateVariableParserRuleCall_10_4_0 = (RuleCall)cStateVariablesAssignment_10_4.eContents().get(0);
		private final Assignment cSchedulesAssignment_10_5 = (Assignment)cAlternatives_10.eContents().get(5);
		private final RuleCall cSchedulesAstScheduleParserRuleCall_10_5_0 = (RuleCall)cSchedulesAssignment_10_5.eContents().get(0);
		private final Assignment cPrioritiesAssignment_10_6 = (Assignment)cAlternatives_10.eContents().get(6);
		private final RuleCall cPrioritiesAstPriorityParserRuleCall_10_6_0 = (RuleCall)cPrioritiesAssignment_10_6.eContents().get(0);
		private final Keyword cEndKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// actor
		/////////////////////////////////////////////////////////////////////////////////
		//AstActor:
		//	{AstActor} "actor" name=ID "(" (parameters+=AstParameter ("," parameters+=AstParameter)*)? ")" (inputs+=AstPort (","
		//	inputs+=AstPort)*)? "==>" (outputs+=AstPort ("," outputs+=AstPort)*)? ":" (functions+=AstFunction |
		//	procedures+=AstProcedure | actions+=AstAction | initializes+=AstInitialize | stateVariables+=AstStateVariable |
		//	schedules+= // Only one is allowed, but that is checked later.
		//	AstSchedule | priorities+=AstPriority)* "end";
		public ParserRule getRule() { return rule; }

		//{AstActor} "actor" name=ID "(" (parameters+=AstParameter ("," parameters+=AstParameter)*)? ")" (inputs+=AstPort (","
		//inputs+=AstPort)*)? "==>" (outputs+=AstPort ("," outputs+=AstPort)*)? ":" (functions+=AstFunction |
		//procedures+=AstProcedure | actions+=AstAction | initializes+=AstInitialize | stateVariables+=AstStateVariable |
		//schedules+= // Only one is allowed, but that is checked later.
		//AstSchedule | priorities+=AstPriority)* "end"
		public Group getGroup() { return cGroup; }

		//{AstActor}
		public Action getAstActorAction_0() { return cAstActorAction_0; }

		//"actor"
		public Keyword getActorKeyword_1() { return cActorKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(parameters+=AstParameter ("," parameters+=AstParameter)*)?
		public Group getGroup_4() { return cGroup_4; }

		//parameters+=AstParameter
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }

		//AstParameter
		public RuleCall getParametersAstParameterParserRuleCall_4_0_0() { return cParametersAstParameterParserRuleCall_4_0_0; }

		//("," parameters+=AstParameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//parameters+=AstParameter
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }

		//AstParameter
		public RuleCall getParametersAstParameterParserRuleCall_4_1_1_0() { return cParametersAstParameterParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//(inputs+=AstPort ("," inputs+=AstPort)*)?
		public Group getGroup_6() { return cGroup_6; }

		//inputs+=AstPort
		public Assignment getInputsAssignment_6_0() { return cInputsAssignment_6_0; }

		//AstPort
		public RuleCall getInputsAstPortParserRuleCall_6_0_0() { return cInputsAstPortParserRuleCall_6_0_0; }

		//("," inputs+=AstPort)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//inputs+=AstPort
		public Assignment getInputsAssignment_6_1_1() { return cInputsAssignment_6_1_1; }

		//AstPort
		public RuleCall getInputsAstPortParserRuleCall_6_1_1_0() { return cInputsAstPortParserRuleCall_6_1_1_0; }

		//"==>"
		public Keyword getEqualsSignEqualsSignGreaterThanSignKeyword_7() { return cEqualsSignEqualsSignGreaterThanSignKeyword_7; }

		//(outputs+=AstPort ("," outputs+=AstPort)*)?
		public Group getGroup_8() { return cGroup_8; }

		//outputs+=AstPort
		public Assignment getOutputsAssignment_8_0() { return cOutputsAssignment_8_0; }

		//AstPort
		public RuleCall getOutputsAstPortParserRuleCall_8_0_0() { return cOutputsAstPortParserRuleCall_8_0_0; }

		//("," outputs+=AstPort)*
		public Group getGroup_8_1() { return cGroup_8_1; }

		//","
		public Keyword getCommaKeyword_8_1_0() { return cCommaKeyword_8_1_0; }

		//outputs+=AstPort
		public Assignment getOutputsAssignment_8_1_1() { return cOutputsAssignment_8_1_1; }

		//AstPort
		public RuleCall getOutputsAstPortParserRuleCall_8_1_1_0() { return cOutputsAstPortParserRuleCall_8_1_1_0; }

		//":"
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }

		//(functions+=AstFunction | procedures+=AstProcedure | actions+=AstAction | initializes+=AstInitialize |
		//stateVariables+=AstStateVariable | schedules+= // Only one is allowed, but that is checked later.
		//AstSchedule | priorities+=AstPriority)*
		public Alternatives getAlternatives_10() { return cAlternatives_10; }

		//functions+=AstFunction
		public Assignment getFunctionsAssignment_10_0() { return cFunctionsAssignment_10_0; }

		//AstFunction
		public RuleCall getFunctionsAstFunctionParserRuleCall_10_0_0() { return cFunctionsAstFunctionParserRuleCall_10_0_0; }

		//procedures+=AstProcedure
		public Assignment getProceduresAssignment_10_1() { return cProceduresAssignment_10_1; }

		//AstProcedure
		public RuleCall getProceduresAstProcedureParserRuleCall_10_1_0() { return cProceduresAstProcedureParserRuleCall_10_1_0; }

		//actions+=AstAction
		public Assignment getActionsAssignment_10_2() { return cActionsAssignment_10_2; }

		//AstAction
		public RuleCall getActionsAstActionParserRuleCall_10_2_0() { return cActionsAstActionParserRuleCall_10_2_0; }

		//initializes+=AstInitialize
		public Assignment getInitializesAssignment_10_3() { return cInitializesAssignment_10_3; }

		//AstInitialize
		public RuleCall getInitializesAstInitializeParserRuleCall_10_3_0() { return cInitializesAstInitializeParserRuleCall_10_3_0; }

		//stateVariables+=AstStateVariable
		public Assignment getStateVariablesAssignment_10_4() { return cStateVariablesAssignment_10_4; }

		//AstStateVariable
		public RuleCall getStateVariablesAstStateVariableParserRuleCall_10_4_0() { return cStateVariablesAstStateVariableParserRuleCall_10_4_0; }

		//schedules+= // Only one is allowed, but that is checked later.
		//AstSchedule
		public Assignment getSchedulesAssignment_10_5() { return cSchedulesAssignment_10_5; }

		//// Only one is allowed, but that is checked later.
		//AstSchedule
		public RuleCall getSchedulesAstScheduleParserRuleCall_10_5_0() { return cSchedulesAstScheduleParserRuleCall_10_5_0; }

		//priorities+=AstPriority
		public Assignment getPrioritiesAssignment_10_6() { return cPrioritiesAssignment_10_6; }

		//AstPriority
		public RuleCall getPrioritiesAstPriorityParserRuleCall_10_6_0() { return cPrioritiesAstPriorityParserRuleCall_10_6_0; }

		//"end"
		public Keyword getEndKeyword_11() { return cEndKeyword_11; }
	}

	public class AstPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeAstTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//AstPort:
		//	annotations+=AstAnnotation* type=AstType name=ID;
		public ParserRule getRule() { return rule; }

		//annotations+=AstAnnotation* type=AstType name=ID
		public Group getGroup() { return cGroup; }

		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_0_0() { return cAnnotationsAstAnnotationParserRuleCall_0_0; }

		//type=AstType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//AstType
		public RuleCall getTypeAstTypeParserRuleCall_1_0() { return cTypeAstTypeParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class AstFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cFunctionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParametersAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParametersAstVariableDeclarationParserRuleCall_5_0_0 = (RuleCall)cParametersAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParametersAstVariableDeclarationParserRuleCall_5_1_1_0 = (RuleCall)cParametersAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTypeAstTypeParserRuleCall_8_0 = (RuleCall)cTypeAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cVarKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cVariablesAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_9_1_0 = (RuleCall)cVariablesAssignment_9_1.eContents().get(0);
		private final Group cGroup_9_2 = (Group)cGroup_9.eContents().get(2);
		private final Keyword cCommaKeyword_9_2_0 = (Keyword)cGroup_9_2.eContents().get(0);
		private final Assignment cVariablesAssignment_9_2_1 = (Assignment)cGroup_9_2.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_9_2_1_0 = (RuleCall)cVariablesAssignment_9_2_1.eContents().get(0);
		private final Keyword cColonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cExpressionAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cExpressionAstExpressionParserRuleCall_11_0 = (RuleCall)cExpressionAssignment_11.eContents().get(0);
		private final Keyword cEndKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//AstFunction returns AstVariable:
		//	{AstFunction} annotations+=AstAnnotation* "function" name=ID "(" (parameters+=AstVariableDeclaration (","
		//	parameters+=AstVariableDeclaration)*)? ")" "-->" type=AstType ("var" variables+=AstValuedVariableDeclaration (","
		//	variables+=AstValuedVariableDeclaration)*)? ":" expression=AstExpression "end";
		public ParserRule getRule() { return rule; }

		//{AstFunction} annotations+=AstAnnotation* "function" name=ID "(" (parameters+=AstVariableDeclaration (","
		//parameters+=AstVariableDeclaration)*)? ")" "-->" type=AstType ("var" variables+=AstValuedVariableDeclaration (","
		//variables+=AstValuedVariableDeclaration)*)? ":" expression=AstExpression "end"
		public Group getGroup() { return cGroup; }

		//{AstFunction}
		public Action getAstFunctionAction_0() { return cAstFunctionAction_0; }

		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_1_0() { return cAnnotationsAstAnnotationParserRuleCall_1_0; }

		//"function"
		public Keyword getFunctionKeyword_2() { return cFunctionKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(parameters+=AstVariableDeclaration ("," parameters+=AstVariableDeclaration)*)?
		public Group getGroup_5() { return cGroup_5; }

		//parameters+=AstVariableDeclaration
		public Assignment getParametersAssignment_5_0() { return cParametersAssignment_5_0; }

		//AstVariableDeclaration
		public RuleCall getParametersAstVariableDeclarationParserRuleCall_5_0_0() { return cParametersAstVariableDeclarationParserRuleCall_5_0_0; }

		//("," parameters+=AstVariableDeclaration)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//parameters+=AstVariableDeclaration
		public Assignment getParametersAssignment_5_1_1() { return cParametersAssignment_5_1_1; }

		//AstVariableDeclaration
		public RuleCall getParametersAstVariableDeclarationParserRuleCall_5_1_1_0() { return cParametersAstVariableDeclarationParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//"-->"
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_7() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_7; }

		//type=AstType
		public Assignment getTypeAssignment_8() { return cTypeAssignment_8; }

		//AstType
		public RuleCall getTypeAstTypeParserRuleCall_8_0() { return cTypeAstTypeParserRuleCall_8_0; }

		//("var" variables+=AstValuedVariableDeclaration ("," variables+=AstValuedVariableDeclaration)*)?
		public Group getGroup_9() { return cGroup_9; }

		//"var"
		public Keyword getVarKeyword_9_0() { return cVarKeyword_9_0; }

		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_9_1() { return cVariablesAssignment_9_1; }

		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_9_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_9_1_0; }

		//("," variables+=AstValuedVariableDeclaration)*
		public Group getGroup_9_2() { return cGroup_9_2; }

		//","
		public Keyword getCommaKeyword_9_2_0() { return cCommaKeyword_9_2_0; }

		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_9_2_1() { return cVariablesAssignment_9_2_1; }

		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_9_2_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_9_2_1_0; }

		//":"
		public Keyword getColonKeyword_10() { return cColonKeyword_10; }

		//expression=AstExpression
		public Assignment getExpressionAssignment_11() { return cExpressionAssignment_11; }

		//AstExpression
		public RuleCall getExpressionAstExpressionParserRuleCall_11_0() { return cExpressionAstExpressionParserRuleCall_11_0; }

		//"end"
		public Keyword getEndKeyword_12() { return cEndKeyword_12; }
	}

	public class AstExternalFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstExternalFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cExternalKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFunctionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cParametersAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cParametersAstVariableDeclarationParserRuleCall_6_0_0 = (RuleCall)cParametersAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cParametersAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cParametersAstVariableDeclarationParserRuleCall_6_1_1_0 = (RuleCall)cParametersAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cTypeAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cTypeAstTypeParserRuleCall_9_0 = (RuleCall)cTypeAssignment_9.eContents().get(0);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//AstExternalFunction:
		//	{AstFunction} annotations+=AstAnnotation* "external" "function" name=ID "(" (parameters+=AstVariableDeclaration (","
		//	parameters+=AstVariableDeclaration)*)? ")" "-->" type=AstType ";";
		public ParserRule getRule() { return rule; }

		//{AstFunction} annotations+=AstAnnotation* "external" "function" name=ID "(" (parameters+=AstVariableDeclaration (","
		//parameters+=AstVariableDeclaration)*)? ")" "-->" type=AstType ";"
		public Group getGroup() { return cGroup; }

		//{AstFunction}
		public Action getAstFunctionAction_0() { return cAstFunctionAction_0; }

		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_1_0() { return cAnnotationsAstAnnotationParserRuleCall_1_0; }

		//"external"
		public Keyword getExternalKeyword_2() { return cExternalKeyword_2; }

		//"function"
		public Keyword getFunctionKeyword_3() { return cFunctionKeyword_3; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//(parameters+=AstVariableDeclaration ("," parameters+=AstVariableDeclaration)*)?
		public Group getGroup_6() { return cGroup_6; }

		//parameters+=AstVariableDeclaration
		public Assignment getParametersAssignment_6_0() { return cParametersAssignment_6_0; }

		//AstVariableDeclaration
		public RuleCall getParametersAstVariableDeclarationParserRuleCall_6_0_0() { return cParametersAstVariableDeclarationParserRuleCall_6_0_0; }

		//("," parameters+=AstVariableDeclaration)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//parameters+=AstVariableDeclaration
		public Assignment getParametersAssignment_6_1_1() { return cParametersAssignment_6_1_1; }

		//AstVariableDeclaration
		public RuleCall getParametersAstVariableDeclarationParserRuleCall_6_1_1_0() { return cParametersAstVariableDeclarationParserRuleCall_6_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//"-->"
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_8() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_8; }

		//type=AstType
		public Assignment getTypeAssignment_9() { return cTypeAssignment_9; }

		//AstType
		public RuleCall getTypeAstTypeParserRuleCall_9_0() { return cTypeAstTypeParserRuleCall_9_0; }

		//";"
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
	}

	public class AstProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstProcedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cProcedureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersAstVariableDeclarationParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersAstVariableDeclarationParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cVarKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cVariablesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_6_1_0 = (RuleCall)cVariablesAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cVariablesAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_6_2_1_0 = (RuleCall)cVariablesAssignment_6_2_1.eContents().get(0);
		private final Keyword cBeginKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cStatementsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatementsAstStatementParserRuleCall_8_0 = (RuleCall)cStatementsAssignment_8.eContents().get(0);
		private final Keyword cEndKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//AstProcedure:
		//	annotations+=AstAnnotation* "procedure" name=ID "(" (parameters+=AstVariableDeclaration (","
		//	parameters+=AstVariableDeclaration)*)? ")" ("var" variables+=AstValuedVariableDeclaration (","
		//	variables+=AstValuedVariableDeclaration)*)? "begin" statements+=AstStatement* "end";
		public ParserRule getRule() { return rule; }

		//annotations+=AstAnnotation* "procedure" name=ID "(" (parameters+=AstVariableDeclaration (","
		//parameters+=AstVariableDeclaration)*)? ")" ("var" variables+=AstValuedVariableDeclaration (","
		//variables+=AstValuedVariableDeclaration)*)? "begin" statements+=AstStatement* "end"
		public Group getGroup() { return cGroup; }

		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_0_0() { return cAnnotationsAstAnnotationParserRuleCall_0_0; }

		//"procedure"
		public Keyword getProcedureKeyword_1() { return cProcedureKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(parameters+=AstVariableDeclaration ("," parameters+=AstVariableDeclaration)*)?
		public Group getGroup_4() { return cGroup_4; }

		//parameters+=AstVariableDeclaration
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }

		//AstVariableDeclaration
		public RuleCall getParametersAstVariableDeclarationParserRuleCall_4_0_0() { return cParametersAstVariableDeclarationParserRuleCall_4_0_0; }

		//("," parameters+=AstVariableDeclaration)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//parameters+=AstVariableDeclaration
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }

		//AstVariableDeclaration
		public RuleCall getParametersAstVariableDeclarationParserRuleCall_4_1_1_0() { return cParametersAstVariableDeclarationParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//("var" variables+=AstValuedVariableDeclaration ("," variables+=AstValuedVariableDeclaration)*)?
		public Group getGroup_6() { return cGroup_6; }

		//"var"
		public Keyword getVarKeyword_6_0() { return cVarKeyword_6_0; }

		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_6_1() { return cVariablesAssignment_6_1; }

		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_6_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_6_1_0; }

		//("," variables+=AstValuedVariableDeclaration)*
		public Group getGroup_6_2() { return cGroup_6_2; }

		//","
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }

		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_6_2_1() { return cVariablesAssignment_6_2_1; }

		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_6_2_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_6_2_1_0; }

		//"begin"
		public Keyword getBeginKeyword_7() { return cBeginKeyword_7; }

		//statements+=AstStatement*
		public Assignment getStatementsAssignment_8() { return cStatementsAssignment_8; }

		//AstStatement
		public RuleCall getStatementsAstStatementParserRuleCall_8_0() { return cStatementsAstStatementParserRuleCall_8_0; }

		//"end"
		public Keyword getEndKeyword_9() { return cEndKeyword_9; }
	}

	public class AstExternalProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstExternalProcedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstProcedureAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cExternalKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cProcedureKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cParametersAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cParametersAstVariableDeclarationParserRuleCall_6_0_0 = (RuleCall)cParametersAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cParametersAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cParametersAstVariableDeclarationParserRuleCall_6_1_1_0 = (RuleCall)cParametersAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//AstExternalProcedure:
		//	{AstProcedure} annotations+=AstAnnotation* "external" "procedure" name=ID "(" (parameters+=AstVariableDeclaration (","
		//	parameters+=AstVariableDeclaration)*)? ")" ";";
		public ParserRule getRule() { return rule; }

		//{AstProcedure} annotations+=AstAnnotation* "external" "procedure" name=ID "(" (parameters+=AstVariableDeclaration (","
		//parameters+=AstVariableDeclaration)*)? ")" ";"
		public Group getGroup() { return cGroup; }

		//{AstProcedure}
		public Action getAstProcedureAction_0() { return cAstProcedureAction_0; }

		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_1_0() { return cAnnotationsAstAnnotationParserRuleCall_1_0; }

		//"external"
		public Keyword getExternalKeyword_2() { return cExternalKeyword_2; }

		//"procedure"
		public Keyword getProcedureKeyword_3() { return cProcedureKeyword_3; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//(parameters+=AstVariableDeclaration ("," parameters+=AstVariableDeclaration)*)?
		public Group getGroup_6() { return cGroup_6; }

		//parameters+=AstVariableDeclaration
		public Assignment getParametersAssignment_6_0() { return cParametersAssignment_6_0; }

		//AstVariableDeclaration
		public RuleCall getParametersAstVariableDeclarationParserRuleCall_6_0_0() { return cParametersAstVariableDeclarationParserRuleCall_6_0_0; }

		//("," parameters+=AstVariableDeclaration)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//parameters+=AstVariableDeclaration
		public Assignment getParametersAssignment_6_1_1() { return cParametersAssignment_6_1_1; }

		//AstVariableDeclaration
		public RuleCall getParametersAstVariableDeclarationParserRuleCall_6_1_1_0() { return cParametersAstVariableDeclarationParserRuleCall_6_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//";"
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}

	public class AstParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstVariableDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueAstExpressionParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//AstParameter returns AstVariable:
		//	AstVariableDeclaration ("=" value=AstExpression)?;
		public ParserRule getRule() { return rule; }

		//AstVariableDeclaration ("=" value=AstExpression)?
		public Group getGroup() { return cGroup; }

		//AstVariableDeclaration
		public RuleCall getAstVariableDeclarationParserRuleCall_0() { return cAstVariableDeclarationParserRuleCall_0; }

		//("=" value=AstExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//value=AstExpression
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//AstExpression
		public RuleCall getValueAstExpressionParserRuleCall_1_1_0() { return cValueAstExpressionParserRuleCall_1_1_0; }
	}

	public class AstStateVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstStateVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstValuedVariableDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AstStateVariable returns AstVariable:
		//	AstValuedVariableDeclaration ";";
		public ParserRule getRule() { return rule; }

		//AstValuedVariableDeclaration ";"
		public Group getGroup() { return cGroup; }

		//AstValuedVariableDeclaration
		public RuleCall getAstValuedVariableDeclarationParserRuleCall_0() { return cAstValuedVariableDeclarationParserRuleCall_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class AstTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifiersIDTerminalRuleCall_0_0 = (RuleCall)cIdentifiersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdentifiersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdentifiersIDTerminalRuleCall_1_1_0 = (RuleCall)cIdentifiersAssignment_1_1.eContents().get(0);
		
		//AstTag:
		//	identifiers+=ID ("." identifiers+=ID)*;
		public ParserRule getRule() { return rule; }

		//identifiers+=ID ("." identifiers+=ID)*
		public Group getGroup() { return cGroup; }

		//identifiers+=ID
		public Assignment getIdentifiersAssignment_0() { return cIdentifiersAssignment_0; }

		//ID
		public RuleCall getIdentifiersIDTerminalRuleCall_0_0() { return cIdentifiersIDTerminalRuleCall_0_0; }

		//("." identifiers+=ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//identifiers+=ID
		public Assignment getIdentifiersAssignment_1_1() { return cIdentifiersAssignment_1_1; }

		//ID
		public RuleCall getIdentifiersIDTerminalRuleCall_1_1_0() { return cIdentifiersIDTerminalRuleCall_1_1_0; }
	}

	public class AstExternalActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstExternalActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstExternalActorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExternalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cActorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParametersAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParametersAstParameterParserRuleCall_5_0_0 = (RuleCall)cParametersAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParametersAstParameterParserRuleCall_5_1_1_0 = (RuleCall)cParametersAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cInputsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cInputsAstPortParserRuleCall_7_0_0 = (RuleCall)cInputsAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cInputsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cInputsAstPortParserRuleCall_7_1_1_0 = (RuleCall)cInputsAssignment_7_1_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Assignment cOutputsAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cOutputsAstPortParserRuleCall_9_0_0 = (RuleCall)cOutputsAssignment_9_0.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cGroup_9.eContents().get(1);
		private final Keyword cCommaKeyword_9_1_0 = (Keyword)cGroup_9_1.eContents().get(0);
		private final Assignment cOutputsAssignment_9_1_1 = (Assignment)cGroup_9_1.eContents().get(1);
		private final RuleCall cOutputsAstPortParserRuleCall_9_1_1_0 = (RuleCall)cOutputsAssignment_9_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// external entities
		/////////////////////////////////////////////////////////////////////////////////
		//AstExternalActor:
		//	{AstExternalActor} "external" "actor" name=ID "(" (parameters+=AstParameter ("," parameters+=AstParameter)*)? ")"
		//	(inputs+=AstPort ("," inputs+=AstPort)*)? "==>" (outputs+=AstPort ("," outputs+=AstPort)*)? ";";
		public ParserRule getRule() { return rule; }

		//{AstExternalActor} "external" "actor" name=ID "(" (parameters+=AstParameter ("," parameters+=AstParameter)*)? ")"
		//(inputs+=AstPort ("," inputs+=AstPort)*)? "==>" (outputs+=AstPort ("," outputs+=AstPort)*)? ";"
		public Group getGroup() { return cGroup; }

		//{AstExternalActor}
		public Action getAstExternalActorAction_0() { return cAstExternalActorAction_0; }

		//"external"
		public Keyword getExternalKeyword_1() { return cExternalKeyword_1; }

		//"actor"
		public Keyword getActorKeyword_2() { return cActorKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(parameters+=AstParameter ("," parameters+=AstParameter)*)?
		public Group getGroup_5() { return cGroup_5; }

		//parameters+=AstParameter
		public Assignment getParametersAssignment_5_0() { return cParametersAssignment_5_0; }

		//AstParameter
		public RuleCall getParametersAstParameterParserRuleCall_5_0_0() { return cParametersAstParameterParserRuleCall_5_0_0; }

		//("," parameters+=AstParameter)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//parameters+=AstParameter
		public Assignment getParametersAssignment_5_1_1() { return cParametersAssignment_5_1_1; }

		//AstParameter
		public RuleCall getParametersAstParameterParserRuleCall_5_1_1_0() { return cParametersAstParameterParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//(inputs+=AstPort ("," inputs+=AstPort)*)?
		public Group getGroup_7() { return cGroup_7; }

		//inputs+=AstPort
		public Assignment getInputsAssignment_7_0() { return cInputsAssignment_7_0; }

		//AstPort
		public RuleCall getInputsAstPortParserRuleCall_7_0_0() { return cInputsAstPortParserRuleCall_7_0_0; }

		//("," inputs+=AstPort)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//","
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }

		//inputs+=AstPort
		public Assignment getInputsAssignment_7_1_1() { return cInputsAssignment_7_1_1; }

		//AstPort
		public RuleCall getInputsAstPortParserRuleCall_7_1_1_0() { return cInputsAstPortParserRuleCall_7_1_1_0; }

		//"==>"
		public Keyword getEqualsSignEqualsSignGreaterThanSignKeyword_8() { return cEqualsSignEqualsSignGreaterThanSignKeyword_8; }

		//(outputs+=AstPort ("," outputs+=AstPort)*)?
		public Group getGroup_9() { return cGroup_9; }

		//outputs+=AstPort
		public Assignment getOutputsAssignment_9_0() { return cOutputsAssignment_9_0; }

		//AstPort
		public RuleCall getOutputsAstPortParserRuleCall_9_0_0() { return cOutputsAstPortParserRuleCall_9_0_0; }

		//("," outputs+=AstPort)*
		public Group getGroup_9_1() { return cGroup_9_1; }

		//","
		public Keyword getCommaKeyword_9_1_0() { return cCommaKeyword_9_1_0; }

		//outputs+=AstPort
		public Assignment getOutputsAssignment_9_1_1() { return cOutputsAssignment_9_1_1; }

		//AstPort
		public RuleCall getOutputsAstPortParserRuleCall_9_1_1_0() { return cOutputsAstPortParserRuleCall_9_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
	}

	public class AstInequalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstInequality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsAstTagParserRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTagsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTagsAstTagParserRuleCall_1_1_0 = (RuleCall)cTagsAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// priorities
		/////////////////////////////////////////////////////////////////////////////////
		//AstInequality:
		//	tags+=AstTag (">" tags+=AstTag)+ ";";
		public ParserRule getRule() { return rule; }

		//tags+=AstTag (">" tags+=AstTag)+ ";"
		public Group getGroup() { return cGroup; }

		//tags+=AstTag
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }

		//AstTag
		public RuleCall getTagsAstTagParserRuleCall_0_0() { return cTagsAstTagParserRuleCall_0_0; }

		//(">" tags+=AstTag)+
		public Group getGroup_1() { return cGroup_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_0() { return cGreaterThanSignKeyword_1_0; }

		//tags+=AstTag
		public Assignment getTagsAssignment_1_1() { return cTagsAssignment_1_1; }

		//AstTag
		public RuleCall getTagsAstTagParserRuleCall_1_1_0() { return cTagsAstTagParserRuleCall_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class AstPriorityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstPriority");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstPriorityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPriorityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInequalitiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInequalitiesAstInequalityParserRuleCall_2_0 = (RuleCall)cInequalitiesAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AstPriority:
		//	{AstPriority} "priority" inequalities+=AstInequality* "end";
		public ParserRule getRule() { return rule; }

		//{AstPriority} "priority" inequalities+=AstInequality* "end"
		public Group getGroup() { return cGroup; }

		//{AstPriority}
		public Action getAstPriorityAction_0() { return cAstPriorityAction_0; }

		//"priority"
		public Keyword getPriorityKeyword_1() { return cPriorityKeyword_1; }

		//inequalities+=AstInequality*
		public Assignment getInequalitiesAssignment_2() { return cInequalitiesAssignment_2; }

		//AstInequality
		public RuleCall getInequalitiesAstInequalityParserRuleCall_2_0() { return cInequalitiesAstInequalityParserRuleCall_2_0; }

		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}

	public class AstScheduleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstSchedule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScheduleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFsmKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitialStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cInitialStateAstStateCrossReference_2_0 = (CrossReference)cInitialStateAssignment_2.eContents().get(0);
		private final RuleCall cInitialStateAstStateIDTerminalRuleCall_2_0_1 = (RuleCall)cInitialStateAstStateCrossReference_2_0.eContents().get(1);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTransitionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTransitionsAstTransitionParserRuleCall_4_0 = (RuleCall)cTransitionsAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// schedule
		/////////////////////////////////////////////////////////////////////////////////
		//AstSchedule:
		//	"schedule" "fsm" initialState=[AstState] ":" transitions+=AstTransition* "end";
		public ParserRule getRule() { return rule; }

		//"schedule" "fsm" initialState=[AstState] ":" transitions+=AstTransition* "end"
		public Group getGroup() { return cGroup; }

		//"schedule"
		public Keyword getScheduleKeyword_0() { return cScheduleKeyword_0; }

		//"fsm"
		public Keyword getFsmKeyword_1() { return cFsmKeyword_1; }

		//initialState=[AstState]
		public Assignment getInitialStateAssignment_2() { return cInitialStateAssignment_2; }

		//[AstState]
		public CrossReference getInitialStateAstStateCrossReference_2_0() { return cInitialStateAstStateCrossReference_2_0; }

		//ID
		public RuleCall getInitialStateAstStateIDTerminalRuleCall_2_0_1() { return cInitialStateAstStateIDTerminalRuleCall_2_0_1; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//transitions+=AstTransition*
		public Assignment getTransitionsAssignment_4() { return cTransitionsAssignment_4; }

		//AstTransition
		public RuleCall getTransitionsAstTransitionParserRuleCall_4_0() { return cTransitionsAstTransitionParserRuleCall_4_0; }

		//"end"
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}

	public class AstTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceAstStateCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceAstStateIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceAstStateCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTagsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTagsAstTagParserRuleCall_2_0 = (RuleCall)cTagsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTagsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTagsAstTagParserRuleCall_3_1_0 = (RuleCall)cTagsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTargetAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTargetAstStateCrossReference_6_0 = (CrossReference)cTargetAssignment_6.eContents().get(0);
		private final RuleCall cTargetAstStateIDTerminalRuleCall_6_0_1 = (RuleCall)cTargetAstStateCrossReference_6_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//AstTransition:
		//	source=[AstState] "(" tags+=AstTag ("," tags+=AstTag)* ")" "-->" target=[AstState] ";";
		public ParserRule getRule() { return rule; }

		//source=[AstState] "(" tags+=AstTag ("," tags+=AstTag)* ")" "-->" target=[AstState] ";"
		public Group getGroup() { return cGroup; }

		//source=[AstState]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }

		//[AstState]
		public CrossReference getSourceAstStateCrossReference_0_0() { return cSourceAstStateCrossReference_0_0; }

		//ID
		public RuleCall getSourceAstStateIDTerminalRuleCall_0_0_1() { return cSourceAstStateIDTerminalRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//tags+=AstTag
		public Assignment getTagsAssignment_2() { return cTagsAssignment_2; }

		//AstTag
		public RuleCall getTagsAstTagParserRuleCall_2_0() { return cTagsAstTagParserRuleCall_2_0; }

		//("," tags+=AstTag)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//tags+=AstTag
		public Assignment getTagsAssignment_3_1() { return cTagsAssignment_3_1; }

		//AstTag
		public RuleCall getTagsAstTagParserRuleCall_3_1_0() { return cTagsAstTagParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"-->"
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_5; }

		//target=[AstState]
		public Assignment getTargetAssignment_6() { return cTargetAssignment_6; }

		//[AstState]
		public CrossReference getTargetAstStateCrossReference_6_0() { return cTargetAstStateCrossReference_6_0; }

		//ID
		public RuleCall getTargetAstStateIDTerminalRuleCall_6_0_1() { return cTargetAstStateIDTerminalRuleCall_6_0_1; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class AstStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstState");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//AstState:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class AstActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTagAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTagAstTagParserRuleCall_2_0_0 = (RuleCall)cTagAssignment_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cActionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cInputsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cInputsAstInputPatternParserRuleCall_4_0_0 = (RuleCall)cInputsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cInputsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cInputsAstInputPatternParserRuleCall_4_1_1_0 = (RuleCall)cInputsAssignment_4_1_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cOutputsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cOutputsAstOutputPatternParserRuleCall_6_0_0 = (RuleCall)cOutputsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cOutputsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cOutputsAstOutputPatternParserRuleCall_6_1_1_0 = (RuleCall)cOutputsAssignment_6_1_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cGuardKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cGuardsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cGuardsAstExpressionParserRuleCall_7_1_0 = (RuleCall)cGuardsAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cGuardsAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cGuardsAstExpressionParserRuleCall_7_2_1_0 = (RuleCall)cGuardsAssignment_7_2_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cVarKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cVariablesAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_8_1_0 = (RuleCall)cVariablesAssignment_8_1.eContents().get(0);
		private final Group cGroup_8_2 = (Group)cGroup_8.eContents().get(2);
		private final Keyword cCommaKeyword_8_2_0 = (Keyword)cGroup_8_2.eContents().get(0);
		private final Assignment cVariablesAssignment_8_2_1 = (Assignment)cGroup_8_2.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_8_2_1_0 = (RuleCall)cVariablesAssignment_8_2_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cDoKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cStatementsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cStatementsAstStatementParserRuleCall_9_1_0 = (RuleCall)cStatementsAssignment_9_1.eContents().get(0);
		private final Keyword cEndKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// actions
		/////////////////////////////////////////////////////////////////////////////////
		//AstAction:
		//	{AstAction} annotations+=AstAnnotation* (tag=AstTag ":")? "action" (inputs+=AstInputPattern (","
		//	inputs+=AstInputPattern)*)? "==>" (outputs+=AstOutputPattern ("," outputs+=AstOutputPattern)*)? ("guard"
		//	guards+=AstExpression ("," guards+=AstExpression)*)? ("var" variables+=AstValuedVariableDeclaration (","
		//	variables+=AstValuedVariableDeclaration)*)? ("do" statements+=AstStatement*)? "end";
		public ParserRule getRule() { return rule; }

		//{AstAction} annotations+=AstAnnotation* (tag=AstTag ":")? "action" (inputs+=AstInputPattern (","
		//inputs+=AstInputPattern)*)? "==>" (outputs+=AstOutputPattern ("," outputs+=AstOutputPattern)*)? ("guard"
		//guards+=AstExpression ("," guards+=AstExpression)*)? ("var" variables+=AstValuedVariableDeclaration (","
		//variables+=AstValuedVariableDeclaration)*)? ("do" statements+=AstStatement*)? "end"
		public Group getGroup() { return cGroup; }

		//{AstAction}
		public Action getAstActionAction_0() { return cAstActionAction_0; }

		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_1_0() { return cAnnotationsAstAnnotationParserRuleCall_1_0; }

		//(tag=AstTag ":")?
		public Group getGroup_2() { return cGroup_2; }

		//tag=AstTag
		public Assignment getTagAssignment_2_0() { return cTagAssignment_2_0; }

		//AstTag
		public RuleCall getTagAstTagParserRuleCall_2_0_0() { return cTagAstTagParserRuleCall_2_0_0; }

		//":"
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }

		//"action"
		public Keyword getActionKeyword_3() { return cActionKeyword_3; }

		//(inputs+=AstInputPattern ("," inputs+=AstInputPattern)*)?
		public Group getGroup_4() { return cGroup_4; }

		//inputs+=AstInputPattern
		public Assignment getInputsAssignment_4_0() { return cInputsAssignment_4_0; }

		//AstInputPattern
		public RuleCall getInputsAstInputPatternParserRuleCall_4_0_0() { return cInputsAstInputPatternParserRuleCall_4_0_0; }

		//("," inputs+=AstInputPattern)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//inputs+=AstInputPattern
		public Assignment getInputsAssignment_4_1_1() { return cInputsAssignment_4_1_1; }

		//AstInputPattern
		public RuleCall getInputsAstInputPatternParserRuleCall_4_1_1_0() { return cInputsAstInputPatternParserRuleCall_4_1_1_0; }

		//"==>"
		public Keyword getEqualsSignEqualsSignGreaterThanSignKeyword_5() { return cEqualsSignEqualsSignGreaterThanSignKeyword_5; }

		//(outputs+=AstOutputPattern ("," outputs+=AstOutputPattern)*)?
		public Group getGroup_6() { return cGroup_6; }

		//outputs+=AstOutputPattern
		public Assignment getOutputsAssignment_6_0() { return cOutputsAssignment_6_0; }

		//AstOutputPattern
		public RuleCall getOutputsAstOutputPatternParserRuleCall_6_0_0() { return cOutputsAstOutputPatternParserRuleCall_6_0_0; }

		//("," outputs+=AstOutputPattern)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//outputs+=AstOutputPattern
		public Assignment getOutputsAssignment_6_1_1() { return cOutputsAssignment_6_1_1; }

		//AstOutputPattern
		public RuleCall getOutputsAstOutputPatternParserRuleCall_6_1_1_0() { return cOutputsAstOutputPatternParserRuleCall_6_1_1_0; }

		//("guard" guards+=AstExpression ("," guards+=AstExpression)*)?
		public Group getGroup_7() { return cGroup_7; }

		//"guard"
		public Keyword getGuardKeyword_7_0() { return cGuardKeyword_7_0; }

		//guards+=AstExpression
		public Assignment getGuardsAssignment_7_1() { return cGuardsAssignment_7_1; }

		//AstExpression
		public RuleCall getGuardsAstExpressionParserRuleCall_7_1_0() { return cGuardsAstExpressionParserRuleCall_7_1_0; }

		//("," guards+=AstExpression)*
		public Group getGroup_7_2() { return cGroup_7_2; }

		//","
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }

		//guards+=AstExpression
		public Assignment getGuardsAssignment_7_2_1() { return cGuardsAssignment_7_2_1; }

		//AstExpression
		public RuleCall getGuardsAstExpressionParserRuleCall_7_2_1_0() { return cGuardsAstExpressionParserRuleCall_7_2_1_0; }

		//("var" variables+=AstValuedVariableDeclaration ("," variables+=AstValuedVariableDeclaration)*)?
		public Group getGroup_8() { return cGroup_8; }

		//"var"
		public Keyword getVarKeyword_8_0() { return cVarKeyword_8_0; }

		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_8_1() { return cVariablesAssignment_8_1; }

		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_8_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_8_1_0; }

		//("," variables+=AstValuedVariableDeclaration)*
		public Group getGroup_8_2() { return cGroup_8_2; }

		//","
		public Keyword getCommaKeyword_8_2_0() { return cCommaKeyword_8_2_0; }

		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_8_2_1() { return cVariablesAssignment_8_2_1; }

		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_8_2_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_8_2_1_0; }

		//("do" statements+=AstStatement*)?
		public Group getGroup_9() { return cGroup_9; }

		//"do"
		public Keyword getDoKeyword_9_0() { return cDoKeyword_9_0; }

		//statements+=AstStatement*
		public Assignment getStatementsAssignment_9_1() { return cStatementsAssignment_9_1; }

		//AstStatement
		public RuleCall getStatementsAstStatementParserRuleCall_9_1_0() { return cStatementsAstStatementParserRuleCall_9_1_0; }

		//"end"
		public Keyword getEndKeyword_10() { return cEndKeyword_10; }
	}

	public class AstInitializeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstInitialize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstInitializeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTagAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTagAstTagParserRuleCall_2_0_0 = (RuleCall)cTagAssignment_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cInitializeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignEqualsSignGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cOutputsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cOutputsAstOutputPatternParserRuleCall_5_0_0 = (RuleCall)cOutputsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cOutputsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cOutputsAstOutputPatternParserRuleCall_5_1_1_0 = (RuleCall)cOutputsAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cGuardKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cGuardsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cGuardsAstExpressionParserRuleCall_6_1_0 = (RuleCall)cGuardsAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cGuardsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cGuardsAstExpressionParserRuleCall_6_2_1_0 = (RuleCall)cGuardsAssignment_6_2_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cVarKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cVariablesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_7_1_0 = (RuleCall)cVariablesAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cVariablesAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_7_2_1_0 = (RuleCall)cVariablesAssignment_7_2_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cDoKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cStatementsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cStatementsAstStatementParserRuleCall_8_1_0 = (RuleCall)cStatementsAssignment_8_1.eContents().get(0);
		private final Keyword cEndKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//AstInitialize returns AstAction:
		//	{AstInitialize} annotations+=AstAnnotation* (tag=AstTag ":")? "initialize" "==>" (outputs+=AstOutputPattern (","
		//	outputs+=AstOutputPattern)*)? ("guard" guards+=AstExpression ("," guards+=AstExpression)*)? ("var"
		//	variables+=AstValuedVariableDeclaration ("," variables+=AstValuedVariableDeclaration)*)? ("do"
		//	statements+=AstStatement*)? "end";
		public ParserRule getRule() { return rule; }

		//{AstInitialize} annotations+=AstAnnotation* (tag=AstTag ":")? "initialize" "==>" (outputs+=AstOutputPattern (","
		//outputs+=AstOutputPattern)*)? ("guard" guards+=AstExpression ("," guards+=AstExpression)*)? ("var"
		//variables+=AstValuedVariableDeclaration ("," variables+=AstValuedVariableDeclaration)*)? ("do"
		//statements+=AstStatement*)? "end"
		public Group getGroup() { return cGroup; }

		//{AstInitialize}
		public Action getAstInitializeAction_0() { return cAstInitializeAction_0; }

		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_1_0() { return cAnnotationsAstAnnotationParserRuleCall_1_0; }

		//(tag=AstTag ":")?
		public Group getGroup_2() { return cGroup_2; }

		//tag=AstTag
		public Assignment getTagAssignment_2_0() { return cTagAssignment_2_0; }

		//AstTag
		public RuleCall getTagAstTagParserRuleCall_2_0_0() { return cTagAstTagParserRuleCall_2_0_0; }

		//":"
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }

		//"initialize"
		public Keyword getInitializeKeyword_3() { return cInitializeKeyword_3; }

		//"==>"
		public Keyword getEqualsSignEqualsSignGreaterThanSignKeyword_4() { return cEqualsSignEqualsSignGreaterThanSignKeyword_4; }

		//(outputs+=AstOutputPattern ("," outputs+=AstOutputPattern)*)?
		public Group getGroup_5() { return cGroup_5; }

		//outputs+=AstOutputPattern
		public Assignment getOutputsAssignment_5_0() { return cOutputsAssignment_5_0; }

		//AstOutputPattern
		public RuleCall getOutputsAstOutputPatternParserRuleCall_5_0_0() { return cOutputsAstOutputPatternParserRuleCall_5_0_0; }

		//("," outputs+=AstOutputPattern)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//outputs+=AstOutputPattern
		public Assignment getOutputsAssignment_5_1_1() { return cOutputsAssignment_5_1_1; }

		//AstOutputPattern
		public RuleCall getOutputsAstOutputPatternParserRuleCall_5_1_1_0() { return cOutputsAstOutputPatternParserRuleCall_5_1_1_0; }

		//("guard" guards+=AstExpression ("," guards+=AstExpression)*)?
		public Group getGroup_6() { return cGroup_6; }

		//"guard"
		public Keyword getGuardKeyword_6_0() { return cGuardKeyword_6_0; }

		//guards+=AstExpression
		public Assignment getGuardsAssignment_6_1() { return cGuardsAssignment_6_1; }

		//AstExpression
		public RuleCall getGuardsAstExpressionParserRuleCall_6_1_0() { return cGuardsAstExpressionParserRuleCall_6_1_0; }

		//("," guards+=AstExpression)*
		public Group getGroup_6_2() { return cGroup_6_2; }

		//","
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }

		//guards+=AstExpression
		public Assignment getGuardsAssignment_6_2_1() { return cGuardsAssignment_6_2_1; }

		//AstExpression
		public RuleCall getGuardsAstExpressionParserRuleCall_6_2_1_0() { return cGuardsAstExpressionParserRuleCall_6_2_1_0; }

		//("var" variables+=AstValuedVariableDeclaration ("," variables+=AstValuedVariableDeclaration)*)?
		public Group getGroup_7() { return cGroup_7; }

		//"var"
		public Keyword getVarKeyword_7_0() { return cVarKeyword_7_0; }

		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_7_1() { return cVariablesAssignment_7_1; }

		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_7_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_7_1_0; }

		//("," variables+=AstValuedVariableDeclaration)*
		public Group getGroup_7_2() { return cGroup_7_2; }

		//","
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }

		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_7_2_1() { return cVariablesAssignment_7_2_1; }

		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_7_2_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_7_2_1_0; }

		//("do" statements+=AstStatement*)?
		public Group getGroup_8() { return cGroup_8; }

		//"do"
		public Keyword getDoKeyword_8_0() { return cDoKeyword_8_0; }

		//statements+=AstStatement*
		public Assignment getStatementsAssignment_8_1() { return cStatementsAssignment_8_1; }

		//AstStatement
		public RuleCall getStatementsAstStatementParserRuleCall_8_1_0() { return cStatementsAstStatementParserRuleCall_8_1_0; }

		//"end"
		public Keyword getEndKeyword_9() { return cEndKeyword_9; }
	}

	public class AstInputPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstInputPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cPortAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cPortAstPortCrossReference_0_0_0 = (CrossReference)cPortAssignment_0_0.eContents().get(0);
		private final RuleCall cPortAstPortIDTerminalRuleCall_0_0_0_1 = (RuleCall)cPortAstPortCrossReference_0_0_0.eContents().get(1);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTokensAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTokensAstTokenParserRuleCall_2_0 = (RuleCall)cTokensAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTokensAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTokensAstTokenParserRuleCall_3_1_0 = (RuleCall)cTokensAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRepeatKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRepeatAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRepeatAstExpressionParserRuleCall_5_1_0 = (RuleCall)cRepeatAssignment_5_1.eContents().get(0);
		
		//AstInputPattern:
		//	(port=[AstPort] ":")? "[" tokens+=AstToken ("," tokens+=AstToken)* "]" ("repeat" repeat=AstExpression)?;
		public ParserRule getRule() { return rule; }

		//(port=[AstPort] ":")? "[" tokens+=AstToken ("," tokens+=AstToken)* "]" ("repeat" repeat=AstExpression)?
		public Group getGroup() { return cGroup; }

		//(port=[AstPort] ":")?
		public Group getGroup_0() { return cGroup_0; }

		//port=[AstPort]
		public Assignment getPortAssignment_0_0() { return cPortAssignment_0_0; }

		//[AstPort]
		public CrossReference getPortAstPortCrossReference_0_0_0() { return cPortAstPortCrossReference_0_0_0; }

		//ID
		public RuleCall getPortAstPortIDTerminalRuleCall_0_0_0_1() { return cPortAstPortIDTerminalRuleCall_0_0_0_1; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//tokens+=AstToken
		public Assignment getTokensAssignment_2() { return cTokensAssignment_2; }

		//AstToken
		public RuleCall getTokensAstTokenParserRuleCall_2_0() { return cTokensAstTokenParserRuleCall_2_0; }

		//("," tokens+=AstToken)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//tokens+=AstToken
		public Assignment getTokensAssignment_3_1() { return cTokensAssignment_3_1; }

		//AstToken
		public RuleCall getTokensAstTokenParserRuleCall_3_1_0() { return cTokensAstTokenParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }

		//("repeat" repeat=AstExpression)?
		public Group getGroup_5() { return cGroup_5; }

		//"repeat"
		public Keyword getRepeatKeyword_5_0() { return cRepeatKeyword_5_0; }

		//repeat=AstExpression
		public Assignment getRepeatAssignment_5_1() { return cRepeatAssignment_5_1; }

		//AstExpression
		public RuleCall getRepeatAstExpressionParserRuleCall_5_1_0() { return cRepeatAstExpressionParserRuleCall_5_1_0; }
	}

	public class AstTokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstToken");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//AstToken returns AstVariable:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class AstOutputPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstOutputPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cPortAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cPortAstPortCrossReference_0_0_0 = (CrossReference)cPortAssignment_0_0.eContents().get(0);
		private final RuleCall cPortAstPortIDTerminalRuleCall_0_0_0_1 = (RuleCall)cPortAstPortCrossReference_0_0_0.eContents().get(1);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesAstExpressionParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuesAstExpressionParserRuleCall_3_1_0 = (RuleCall)cValuesAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRepeatKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRepeatAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRepeatAstExpressionParserRuleCall_5_1_0 = (RuleCall)cRepeatAssignment_5_1.eContents().get(0);
		
		//AstOutputPattern:
		//	(port=[AstPort] ":")? "[" values+=AstExpression ("," values+=AstExpression)* "]" ("repeat" repeat=AstExpression)?;
		public ParserRule getRule() { return rule; }

		//(port=[AstPort] ":")? "[" values+=AstExpression ("," values+=AstExpression)* "]" ("repeat" repeat=AstExpression)?
		public Group getGroup() { return cGroup; }

		//(port=[AstPort] ":")?
		public Group getGroup_0() { return cGroup_0; }

		//port=[AstPort]
		public Assignment getPortAssignment_0_0() { return cPortAssignment_0_0; }

		//[AstPort]
		public CrossReference getPortAstPortCrossReference_0_0_0() { return cPortAstPortCrossReference_0_0_0; }

		//ID
		public RuleCall getPortAstPortIDTerminalRuleCall_0_0_0_1() { return cPortAstPortIDTerminalRuleCall_0_0_0_1; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//values+=AstExpression
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }

		//AstExpression
		public RuleCall getValuesAstExpressionParserRuleCall_2_0() { return cValuesAstExpressionParserRuleCall_2_0; }

		//("," values+=AstExpression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//values+=AstExpression
		public Assignment getValuesAssignment_3_1() { return cValuesAssignment_3_1; }

		//AstExpression
		public RuleCall getValuesAstExpressionParserRuleCall_3_1_0() { return cValuesAstExpressionParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }

		//("repeat" repeat=AstExpression)?
		public Group getGroup_5() { return cGroup_5; }

		//"repeat"
		public Keyword getRepeatKeyword_5_0() { return cRepeatKeyword_5_0; }

		//repeat=AstExpression
		public Assignment getRepeatAssignment_5_1() { return cRepeatAssignment_5_1; }

		//AstExpression
		public RuleCall getRepeatAstExpressionParserRuleCall_5_1_0() { return cRepeatAstExpressionParserRuleCall_5_1_0; }
	}

	public class AstStatementAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstStatementAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetAstVariableCrossReference_0_0 = (CrossReference)cTargetAssignment_0.eContents().get(0);
		private final RuleCall cTargetAstVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cTargetAstVariableCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndexesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexesAstExpressionParserRuleCall_1_1_0 = (RuleCall)cIndexesAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cMemberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMemberAstMemberAccessParserRuleCall_2_0 = (RuleCall)cMemberAssignment_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueAstExpressionParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// statements
		/////////////////////////////////////////////////////////////////////////////////
		//AstStatementAssign:
		//	target=[AstVariable] ("[" indexes+=AstExpression "]")* member+=AstMemberAccess* ":=" value=AstExpression ";";
		public ParserRule getRule() { return rule; }

		//target=[AstVariable] ("[" indexes+=AstExpression "]")* member+=AstMemberAccess* ":=" value=AstExpression ";"
		public Group getGroup() { return cGroup; }

		//target=[AstVariable]
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }

		//[AstVariable]
		public CrossReference getTargetAstVariableCrossReference_0_0() { return cTargetAstVariableCrossReference_0_0; }

		//ID
		public RuleCall getTargetAstVariableIDTerminalRuleCall_0_0_1() { return cTargetAstVariableIDTerminalRuleCall_0_0_1; }

		//("[" indexes+=AstExpression "]")*
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//indexes+=AstExpression
		public Assignment getIndexesAssignment_1_1() { return cIndexesAssignment_1_1; }

		//AstExpression
		public RuleCall getIndexesAstExpressionParserRuleCall_1_1_0() { return cIndexesAstExpressionParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//member+=AstMemberAccess*
		public Assignment getMemberAssignment_2() { return cMemberAssignment_2; }

		//AstMemberAccess
		public RuleCall getMemberAstMemberAccessParserRuleCall_2_0() { return cMemberAstMemberAccessParserRuleCall_2_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }

		//value=AstExpression
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//AstExpression
		public RuleCall getValueAstExpressionParserRuleCall_4_0() { return cValueAstExpressionParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class AstStatementCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstStatementCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProcedureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cProcedureAstProcedureCrossReference_0_0 = (CrossReference)cProcedureAssignment_0.eContents().get(0);
		private final RuleCall cProcedureAstProcedureIDTerminalRuleCall_0_0_1 = (RuleCall)cProcedureAstProcedureCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersAstExpressionParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersAstExpressionParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AstStatementCall:
		//	procedure=[AstProcedure] "(" (parameters+=AstExpression ("," parameters+=AstExpression)*)? ")" ";";
		public ParserRule getRule() { return rule; }

		//procedure=[AstProcedure] "(" (parameters+=AstExpression ("," parameters+=AstExpression)*)? ")" ";"
		public Group getGroup() { return cGroup; }

		//procedure=[AstProcedure]
		public Assignment getProcedureAssignment_0() { return cProcedureAssignment_0; }

		//[AstProcedure]
		public CrossReference getProcedureAstProcedureCrossReference_0_0() { return cProcedureAstProcedureCrossReference_0_0; }

		//ID
		public RuleCall getProcedureAstProcedureIDTerminalRuleCall_0_0_1() { return cProcedureAstProcedureIDTerminalRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(parameters+=AstExpression ("," parameters+=AstExpression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//parameters+=AstExpression
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }

		//AstExpression
		public RuleCall getParametersAstExpressionParserRuleCall_2_0_0() { return cParametersAstExpressionParserRuleCall_2_0_0; }

		//("," parameters+=AstExpression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//parameters+=AstExpression
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }

		//AstExpression
		public RuleCall getParametersAstExpressionParserRuleCall_2_1_1_0() { return cParametersAstExpressionParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class AstStatementForeachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstStatementForeach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGeneratorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGeneratorsAstForeachGeneratorParserRuleCall_1_0 = (RuleCall)cGeneratorsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGeneratorsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGeneratorsAstForeachGeneratorParserRuleCall_2_1_0 = (RuleCall)cGeneratorsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVarKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariablesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_3_1_0 = (RuleCall)cVariablesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cVariablesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_3_2_1_0 = (RuleCall)cVariablesAssignment_3_2_1.eContents().get(0);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsAstStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AstStatementForeach:
		//	"foreach" generators+=AstForeachGenerator ("," generators+=AstForeachGenerator)* ("var"
		//	variables+=AstValuedVariableDeclaration ("," variables+=AstValuedVariableDeclaration)*)? "do"
		//	statements+=AstStatement* "end";
		public ParserRule getRule() { return rule; }

		//"foreach" generators+=AstForeachGenerator ("," generators+=AstForeachGenerator)* ("var"
		//variables+=AstValuedVariableDeclaration ("," variables+=AstValuedVariableDeclaration)*)? "do" statements+=AstStatement*
		//"end"
		public Group getGroup() { return cGroup; }

		//"foreach"
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }

		//generators+=AstForeachGenerator
		public Assignment getGeneratorsAssignment_1() { return cGeneratorsAssignment_1; }

		//AstForeachGenerator
		public RuleCall getGeneratorsAstForeachGeneratorParserRuleCall_1_0() { return cGeneratorsAstForeachGeneratorParserRuleCall_1_0; }

		//("," generators+=AstForeachGenerator)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//generators+=AstForeachGenerator
		public Assignment getGeneratorsAssignment_2_1() { return cGeneratorsAssignment_2_1; }

		//AstForeachGenerator
		public RuleCall getGeneratorsAstForeachGeneratorParserRuleCall_2_1_0() { return cGeneratorsAstForeachGeneratorParserRuleCall_2_1_0; }

		//("var" variables+=AstValuedVariableDeclaration ("," variables+=AstValuedVariableDeclaration)*)?
		public Group getGroup_3() { return cGroup_3; }

		//"var"
		public Keyword getVarKeyword_3_0() { return cVarKeyword_3_0; }

		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_3_1() { return cVariablesAssignment_3_1; }

		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_3_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_3_1_0; }

		//("," variables+=AstValuedVariableDeclaration)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_3_2_1() { return cVariablesAssignment_3_2_1; }

		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_3_2_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_3_2_1_0; }

		//"do"
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }

		//statements+=AstStatement*
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }

		//AstStatement
		public RuleCall getStatementsAstStatementParserRuleCall_5_0() { return cStatementsAstStatementParserRuleCall_5_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}

	public class AstForeachGeneratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstForeachGenerator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableAstVariableDeclarationParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionAstExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//AstForeachGenerator:
		//	variable=AstVariableDeclaration "in" expression=AstExpression;
		public ParserRule getRule() { return rule; }

		//variable=AstVariableDeclaration "in" expression=AstExpression
		public Group getGroup() { return cGroup; }

		//variable=AstVariableDeclaration
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//AstVariableDeclaration
		public RuleCall getVariableAstVariableDeclarationParserRuleCall_0_0() { return cVariableAstVariableDeclarationParserRuleCall_0_0; }

		//"in"
		public Keyword getInKeyword_1() { return cInKeyword_1; }

		//expression=AstExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//AstExpression
		public RuleCall getExpressionAstExpressionParserRuleCall_2_0() { return cExpressionAstExpressionParserRuleCall_2_0; }
	}

	public class AstStatementBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstStatementBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstStatementBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBeginKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVarKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_2_2_1_0 = (RuleCall)cVariablesAssignment_2_2_1.eContents().get(0);
		private final Keyword cDoKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsAstStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AstStatementBlock:
		//	{AstStatementBlock} "begin" ("var" variables+=AstValuedVariableDeclaration (","
		//	variables+=AstValuedVariableDeclaration)* "do")? statements+=AstStatement* "end";
		public ParserRule getRule() { return rule; }

		//{AstStatementBlock} "begin" ("var" variables+=AstValuedVariableDeclaration (","
		//variables+=AstValuedVariableDeclaration)* "do")? statements+=AstStatement* "end"
		public Group getGroup() { return cGroup; }

		//{AstStatementBlock}
		public Action getAstStatementBlockAction_0() { return cAstStatementBlockAction_0; }

		//"begin"
		public Keyword getBeginKeyword_1() { return cBeginKeyword_1; }

		//("var" variables+=AstValuedVariableDeclaration ("," variables+=AstValuedVariableDeclaration)* "do")?
		public Group getGroup_2() { return cGroup_2; }

		//"var"
		public Keyword getVarKeyword_2_0() { return cVarKeyword_2_0; }

		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }

		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_2_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_2_1_0; }

		//("," variables+=AstValuedVariableDeclaration)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_2_2_1() { return cVariablesAssignment_2_2_1; }

		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_2_2_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_2_2_1_0; }

		//"do"
		public Keyword getDoKeyword_2_3() { return cDoKeyword_2_3; }

		//statements+=AstStatement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }

		//AstStatement
		public RuleCall getStatementsAstStatementParserRuleCall_3_0() { return cStatementsAstStatementParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}

	public class AstStatementIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstStatementIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionAstExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenAstStatementParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElseAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElseAstStatementParserRuleCall_4_1_0 = (RuleCall)cElseAssignment_4_1.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AstStatementIf:
		//	"if" condition=AstExpression "then" then+=AstStatement* ("else" else+=AstStatement*)? "end";
		public ParserRule getRule() { return rule; }

		//"if" condition=AstExpression "then" then+=AstStatement* ("else" else+=AstStatement*)? "end"
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//condition=AstExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//AstExpression
		public RuleCall getConditionAstExpressionParserRuleCall_1_0() { return cConditionAstExpressionParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//then+=AstStatement*
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }

		//AstStatement
		public RuleCall getThenAstStatementParserRuleCall_3_0() { return cThenAstStatementParserRuleCall_3_0; }

		//("else" else+=AstStatement*)?
		public Group getGroup_4() { return cGroup_4; }

		//"else"
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }

		//else+=AstStatement*
		public Assignment getElseAssignment_4_1() { return cElseAssignment_4_1; }

		//AstStatement
		public RuleCall getElseAstStatementParserRuleCall_4_1_0() { return cElseAstStatementParserRuleCall_4_1_0; }

		//"end"
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}

	public class AstStatementWhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstStatementWhile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionAstExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsAstStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AstStatementWhile:
		//	"while" condition=AstExpression "do" statements+=AstStatement* "end";
		public ParserRule getRule() { return rule; }

		//"while" condition=AstExpression "do" statements+=AstStatement* "end"
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//condition=AstExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//AstExpression
		public RuleCall getConditionAstExpressionParserRuleCall_1_0() { return cConditionAstExpressionParserRuleCall_1_0; }

		//"do"
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }

		//statements+=AstStatement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }

		//AstStatement
		public RuleCall getStatementsAstStatementParserRuleCall_3_0() { return cStatementsAstStatementParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}

	public class AstStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAstStatementAssignParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAstStatementCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAstStatementForeachParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAstStatementIfParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAstStatementWhileParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAstStatementBlockParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//AstStatement:
		//	AstStatementAssign | AstStatementCall | AstStatementForeach | AstStatementIf | AstStatementWhile | AstStatementBlock;
		public ParserRule getRule() { return rule; }

		//AstStatementAssign | AstStatementCall | AstStatementForeach | AstStatementIf | AstStatementWhile | AstStatementBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//AstStatementAssign
		public RuleCall getAstStatementAssignParserRuleCall_0() { return cAstStatementAssignParserRuleCall_0; }

		//AstStatementCall
		public RuleCall getAstStatementCallParserRuleCall_1() { return cAstStatementCallParserRuleCall_1; }

		//AstStatementForeach
		public RuleCall getAstStatementForeachParserRuleCall_2() { return cAstStatementForeachParserRuleCall_2; }

		//AstStatementIf
		public RuleCall getAstStatementIfParserRuleCall_3() { return cAstStatementIfParserRuleCall_3; }

		//AstStatementWhile
		public RuleCall getAstStatementWhileParserRuleCall_4() { return cAstStatementWhileParserRuleCall_4; }

		//AstStatementBlock
		public RuleCall getAstStatementBlockParserRuleCall_5() { return cAstStatementBlockParserRuleCall_5; }
	}

	public class AstExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstExpressionAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAstExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorVerticalLineVerticalLineKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorOrKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorFullStopFullStopKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAstExpressionAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// expressions
		/////////////////////////////////////////////////////////////////////////////////
		//AstExpression:
		//	AstExpressionAnd ({AstExpressionBinary.left=current} operator=("||" | "or" | "..") right=AstExpressionAnd)*;
		public ParserRule getRule() { return rule; }

		//AstExpressionAnd ({AstExpressionBinary.left=current} operator=("||" | "or" | "..") right=AstExpressionAnd)*
		public Group getGroup() { return cGroup; }

		//AstExpressionAnd
		public RuleCall getAstExpressionAndParserRuleCall_0() { return cAstExpressionAndParserRuleCall_0; }

		//({AstExpressionBinary.left=current} operator=("||" | "or" | "..") right=AstExpressionAnd)*
		public Group getGroup_1() { return cGroup_1; }

		//{AstExpressionBinary.left=current}
		public Action getAstExpressionBinaryLeftAction_1_0() { return cAstExpressionBinaryLeftAction_1_0; }

		//operator=("||" | "or" | "..")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"||" | "or" | ".."
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//"||"
		public Keyword getOperatorVerticalLineVerticalLineKeyword_1_1_0_0() { return cOperatorVerticalLineVerticalLineKeyword_1_1_0_0; }

		//"or"
		public Keyword getOperatorOrKeyword_1_1_0_1() { return cOperatorOrKeyword_1_1_0_1; }

		//".."
		public Keyword getOperatorFullStopFullStopKeyword_1_1_0_2() { return cOperatorFullStopFullStopKeyword_1_1_0_2; }

		//right=AstExpressionAnd
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AstExpressionAnd
		public RuleCall getRightAstExpressionAndParserRuleCall_1_2_0() { return cRightAstExpressionAndParserRuleCall_1_2_0; }
	}

	public class AstExpressionAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstExpressionAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstExpressionBitorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAstExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAmpersandAmpersandKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorAndKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAstExpressionBitorParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AstExpressionAnd returns AstExpression:
		//	AstExpressionBitor ({AstExpressionBinary.left=current} operator=("&&" | "and") right=AstExpressionBitor)*;
		public ParserRule getRule() { return rule; }

		//AstExpressionBitor ({AstExpressionBinary.left=current} operator=("&&" | "and") right=AstExpressionBitor)*
		public Group getGroup() { return cGroup; }

		//AstExpressionBitor
		public RuleCall getAstExpressionBitorParserRuleCall_0() { return cAstExpressionBitorParserRuleCall_0; }

		//({AstExpressionBinary.left=current} operator=("&&" | "and") right=AstExpressionBitor)*
		public Group getGroup_1() { return cGroup_1; }

		//{AstExpressionBinary.left=current}
		public Action getAstExpressionBinaryLeftAction_1_0() { return cAstExpressionBinaryLeftAction_1_0; }

		//operator=("&&" | "and")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"&&" | "and"
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//"&&"
		public Keyword getOperatorAmpersandAmpersandKeyword_1_1_0_0() { return cOperatorAmpersandAmpersandKeyword_1_1_0_0; }

		//"and"
		public Keyword getOperatorAndKeyword_1_1_0_1() { return cOperatorAndKeyword_1_1_0_1; }

		//right=AstExpressionBitor
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AstExpressionBitor
		public RuleCall getRightAstExpressionBitorParserRuleCall_1_2_0() { return cRightAstExpressionBitorParserRuleCall_1_2_0; }
	}

	public class AstExpressionBitorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstExpressionBitor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstExpressionBitxorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAstExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorVerticalLineKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAstExpressionBitxorParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AstExpressionBitor returns AstExpression:
		//	AstExpressionBitxor ({AstExpressionBinary.left=current} operator="|" right=AstExpressionBitxor)*;
		public ParserRule getRule() { return rule; }

		//AstExpressionBitxor ({AstExpressionBinary.left=current} operator="|" right=AstExpressionBitxor)*
		public Group getGroup() { return cGroup; }

		//AstExpressionBitxor
		public RuleCall getAstExpressionBitxorParserRuleCall_0() { return cAstExpressionBitxorParserRuleCall_0; }

		//({AstExpressionBinary.left=current} operator="|" right=AstExpressionBitxor)*
		public Group getGroup_1() { return cGroup_1; }

		//{AstExpressionBinary.left=current}
		public Action getAstExpressionBinaryLeftAction_1_0() { return cAstExpressionBinaryLeftAction_1_0; }

		//operator="|"
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"|"
		public Keyword getOperatorVerticalLineKeyword_1_1_0() { return cOperatorVerticalLineKeyword_1_1_0; }

		//right=AstExpressionBitxor
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AstExpressionBitxor
		public RuleCall getRightAstExpressionBitxorParserRuleCall_1_2_0() { return cRightAstExpressionBitxorParserRuleCall_1_2_0; }
	}

	public class AstExpressionBitxorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstExpressionBitxor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstExpressionBitandParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAstExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorCircumflexAccentKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAstExpressionBitandParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AstExpressionBitxor returns AstExpression:
		//	AstExpressionBitand ({AstExpressionBinary.left=current} operator="^" right=AstExpressionBitand)*;
		public ParserRule getRule() { return rule; }

		//AstExpressionBitand ({AstExpressionBinary.left=current} operator="^" right=AstExpressionBitand)*
		public Group getGroup() { return cGroup; }

		//AstExpressionBitand
		public RuleCall getAstExpressionBitandParserRuleCall_0() { return cAstExpressionBitandParserRuleCall_0; }

		//({AstExpressionBinary.left=current} operator="^" right=AstExpressionBitand)*
		public Group getGroup_1() { return cGroup_1; }

		//{AstExpressionBinary.left=current}
		public Action getAstExpressionBinaryLeftAction_1_0() { return cAstExpressionBinaryLeftAction_1_0; }

		//operator="^"
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"^"
		public Keyword getOperatorCircumflexAccentKeyword_1_1_0() { return cOperatorCircumflexAccentKeyword_1_1_0; }

		//right=AstExpressionBitand
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AstExpressionBitand
		public RuleCall getRightAstExpressionBitandParserRuleCall_1_2_0() { return cRightAstExpressionBitandParserRuleCall_1_2_0; }
	}

	public class AstExpressionBitandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstExpressionBitand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstExpressionEqParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAstExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorAmpersandKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAstExpressionEqParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AstExpressionBitand returns AstExpression:
		//	AstExpressionEq ({AstExpressionBinary.left=current} operator="&" right=AstExpressionEq)*;
		public ParserRule getRule() { return rule; }

		//AstExpressionEq ({AstExpressionBinary.left=current} operator="&" right=AstExpressionEq)*
		public Group getGroup() { return cGroup; }

		//AstExpressionEq
		public RuleCall getAstExpressionEqParserRuleCall_0() { return cAstExpressionEqParserRuleCall_0; }

		//({AstExpressionBinary.left=current} operator="&" right=AstExpressionEq)*
		public Group getGroup_1() { return cGroup_1; }

		//{AstExpressionBinary.left=current}
		public Action getAstExpressionBinaryLeftAction_1_0() { return cAstExpressionBinaryLeftAction_1_0; }

		//operator="&"
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"&"
		public Keyword getOperatorAmpersandKeyword_1_1_0() { return cOperatorAmpersandKeyword_1_1_0; }

		//right=AstExpressionEq
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AstExpressionEq
		public RuleCall getRightAstExpressionEqParserRuleCall_1_2_0() { return cRightAstExpressionEqParserRuleCall_1_2_0; }
	}

	public class AstExpressionEqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstExpressionEq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstExpressionRelationalParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAstExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorEqualsSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAstExpressionRelationalParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AstExpressionEq returns AstExpression:
		//	AstExpressionRelational ({AstExpressionBinary.left=current} operator=("=" | "!=") right=AstExpressionRelational)*;
		public ParserRule getRule() { return rule; }

		//AstExpressionRelational ({AstExpressionBinary.left=current} operator=("=" | "!=") right=AstExpressionRelational)*
		public Group getGroup() { return cGroup; }

		//AstExpressionRelational
		public RuleCall getAstExpressionRelationalParserRuleCall_0() { return cAstExpressionRelationalParserRuleCall_0; }

		//({AstExpressionBinary.left=current} operator=("=" | "!=") right=AstExpressionRelational)*
		public Group getGroup_1() { return cGroup_1; }

		//{AstExpressionBinary.left=current}
		public Action getAstExpressionBinaryLeftAction_1_0() { return cAstExpressionBinaryLeftAction_1_0; }

		//operator=("=" | "!=")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"=" | "!="
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//"="
		public Keyword getOperatorEqualsSignKeyword_1_1_0_0() { return cOperatorEqualsSignKeyword_1_1_0_0; }

		//"!="
		public Keyword getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOperatorExclamationMarkEqualsSignKeyword_1_1_0_1; }

		//right=AstExpressionRelational
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AstExpressionRelational
		public RuleCall getRightAstExpressionRelationalParserRuleCall_1_2_0() { return cRightAstExpressionRelationalParserRuleCall_1_2_0; }
	}

	public class AstExpressionRelationalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstExpressionRelational");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstExpressionShiftParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAstExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorLessThanSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAstExpressionShiftParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AstExpressionRelational returns AstExpression:
		//	AstExpressionShift ({AstExpressionBinary.left=current} operator=("<" | "<=" | ">" | ">=") right=AstExpressionShift)*;
		public ParserRule getRule() { return rule; }

		//AstExpressionShift ({AstExpressionBinary.left=current} operator=("<" | "<=" | ">" | ">=") right=AstExpressionShift)*
		public Group getGroup() { return cGroup; }

		//AstExpressionShift
		public RuleCall getAstExpressionShiftParserRuleCall_0() { return cAstExpressionShiftParserRuleCall_0; }

		//({AstExpressionBinary.left=current} operator=("<" | "<=" | ">" | ">=") right=AstExpressionShift)*
		public Group getGroup_1() { return cGroup_1; }

		//{AstExpressionBinary.left=current}
		public Action getAstExpressionBinaryLeftAction_1_0() { return cAstExpressionBinaryLeftAction_1_0; }

		//operator=("<" | "<=" | ">" | ">=")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"<" | "<=" | ">" | ">="
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//"<"
		public Keyword getOperatorLessThanSignKeyword_1_1_0_0() { return cOperatorLessThanSignKeyword_1_1_0_0; }

		//"<="
		public Keyword getOperatorLessThanSignEqualsSignKeyword_1_1_0_1() { return cOperatorLessThanSignEqualsSignKeyword_1_1_0_1; }

		//">"
		public Keyword getOperatorGreaterThanSignKeyword_1_1_0_2() { return cOperatorGreaterThanSignKeyword_1_1_0_2; }

		//">="
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3() { return cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3; }

		//right=AstExpressionShift
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AstExpressionShift
		public RuleCall getRightAstExpressionShiftParserRuleCall_1_2_0() { return cRightAstExpressionShiftParserRuleCall_1_2_0; }
	}

	public class AstExpressionShiftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstExpressionShift");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstExpressionAdditiveParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAstExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorLessThanSignLessThanSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorGreaterThanSignGreaterThanSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAstExpressionAdditiveParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AstExpressionShift returns AstExpression:
		//	AstExpressionAdditive ({AstExpressionBinary.left=current} operator=("<<" | ">>" | ">>>")
		//	right=AstExpressionAdditive)*;
		public ParserRule getRule() { return rule; }

		//AstExpressionAdditive ({AstExpressionBinary.left=current} operator=("<<" | ">>" | ">>>") right=AstExpressionAdditive)*
		public Group getGroup() { return cGroup; }

		//AstExpressionAdditive
		public RuleCall getAstExpressionAdditiveParserRuleCall_0() { return cAstExpressionAdditiveParserRuleCall_0; }

		//({AstExpressionBinary.left=current} operator=("<<" | ">>" | ">>>") right=AstExpressionAdditive)*
		public Group getGroup_1() { return cGroup_1; }

		//{AstExpressionBinary.left=current}
		public Action getAstExpressionBinaryLeftAction_1_0() { return cAstExpressionBinaryLeftAction_1_0; }

		//operator=("<<" | ">>" | ">>>")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"<<" | ">>" | ">>>"
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//"<<"
		public Keyword getOperatorLessThanSignLessThanSignKeyword_1_1_0_0() { return cOperatorLessThanSignLessThanSignKeyword_1_1_0_0; }

		//">>"
		public Keyword getOperatorGreaterThanSignGreaterThanSignKeyword_1_1_0_1() { return cOperatorGreaterThanSignGreaterThanSignKeyword_1_1_0_1; }

		//">>>"
		public Keyword getOperatorGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_0_2() { return cOperatorGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_0_2; }

		//right=AstExpressionAdditive
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AstExpressionAdditive
		public RuleCall getRightAstExpressionAdditiveParserRuleCall_1_2_0() { return cRightAstExpressionAdditiveParserRuleCall_1_2_0; }
	}

	public class AstExpressionAdditiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstExpressionAdditive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstExpressionMultiplicativeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAstExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAstExpressionMultiplicativeParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AstExpressionAdditive returns AstExpression:
		//	AstExpressionMultiplicative ({AstExpressionBinary.left=current} operator=("+" | "-")
		//	right=AstExpressionMultiplicative)*;
		public ParserRule getRule() { return rule; }

		//AstExpressionMultiplicative ({AstExpressionBinary.left=current} operator=("+" | "-") right=AstExpressionMultiplicative)*
		public Group getGroup() { return cGroup; }

		//AstExpressionMultiplicative
		public RuleCall getAstExpressionMultiplicativeParserRuleCall_0() { return cAstExpressionMultiplicativeParserRuleCall_0; }

		//({AstExpressionBinary.left=current} operator=("+" | "-") right=AstExpressionMultiplicative)*
		public Group getGroup_1() { return cGroup_1; }

		//{AstExpressionBinary.left=current}
		public Action getAstExpressionBinaryLeftAction_1_0() { return cAstExpressionBinaryLeftAction_1_0; }

		//operator=("+" | "-")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"+" | "-"
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//"+"
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }

		//"-"
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }

		//right=AstExpressionMultiplicative
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AstExpressionMultiplicative
		public RuleCall getRightAstExpressionMultiplicativeParserRuleCall_1_2_0() { return cRightAstExpressionMultiplicativeParserRuleCall_1_2_0; }
	}

	public class AstExpressionMultiplicativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstExpressionMultiplicative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstExpressionExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAstExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorDivKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperatorModKeyword_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAstExpressionExpParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AstExpressionMultiplicative returns AstExpression:
		//	AstExpressionExp ({AstExpressionBinary.left=current} operator=("*" | "/" | "div" | "mod") right=AstExpressionExp)*;
		public ParserRule getRule() { return rule; }

		//AstExpressionExp ({AstExpressionBinary.left=current} operator=("*" | "/" | "div" | "mod") right=AstExpressionExp)*
		public Group getGroup() { return cGroup; }

		//AstExpressionExp
		public RuleCall getAstExpressionExpParserRuleCall_0() { return cAstExpressionExpParserRuleCall_0; }

		//({AstExpressionBinary.left=current} operator=("*" | "/" | "div" | "mod") right=AstExpressionExp)*
		public Group getGroup_1() { return cGroup_1; }

		//{AstExpressionBinary.left=current}
		public Action getAstExpressionBinaryLeftAction_1_0() { return cAstExpressionBinaryLeftAction_1_0; }

		//operator=("*" | "/" | "div" | "mod")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"*" | "/" | "div" | "mod"
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//"*"
		public Keyword getOperatorAsteriskKeyword_1_1_0_0() { return cOperatorAsteriskKeyword_1_1_0_0; }

		//"/"
		public Keyword getOperatorSolidusKeyword_1_1_0_1() { return cOperatorSolidusKeyword_1_1_0_1; }

		//"div"
		public Keyword getOperatorDivKeyword_1_1_0_2() { return cOperatorDivKeyword_1_1_0_2; }

		//"mod"
		public Keyword getOperatorModKeyword_1_1_0_3() { return cOperatorModKeyword_1_1_0_3; }

		//right=AstExpressionExp
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AstExpressionExp
		public RuleCall getRightAstExpressionExpParserRuleCall_1_2_0() { return cRightAstExpressionExpParserRuleCall_1_2_0; }
	}

	public class AstExpressionExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstExpressionExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstExpressionUnaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAstExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorAsteriskAsteriskKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAstExpressionUnaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AstExpressionExp returns AstExpression:
		//	AstExpressionUnary ({AstExpressionBinary.left=current} operator="**" right=AstExpressionUnary)*;
		public ParserRule getRule() { return rule; }

		//AstExpressionUnary ({AstExpressionBinary.left=current} operator="**" right=AstExpressionUnary)*
		public Group getGroup() { return cGroup; }

		//AstExpressionUnary
		public RuleCall getAstExpressionUnaryParserRuleCall_0() { return cAstExpressionUnaryParserRuleCall_0; }

		//({AstExpressionBinary.left=current} operator="**" right=AstExpressionUnary)*
		public Group getGroup_1() { return cGroup_1; }

		//{AstExpressionBinary.left=current}
		public Action getAstExpressionBinaryLeftAction_1_0() { return cAstExpressionBinaryLeftAction_1_0; }

		//operator="**"
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//"**"
		public Keyword getOperatorAsteriskAsteriskKeyword_1_1_0() { return cOperatorAsteriskAsteriskKeyword_1_1_0; }

		//right=AstExpressionUnary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AstExpressionUnary
		public RuleCall getRightAstExpressionUnaryParserRuleCall_1_2_0() { return cRightAstExpressionUnaryParserRuleCall_1_2_0; }
	}

	public class AstExpressionUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstExpressionUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAstExpressionUnaryAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cUnaryOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cUnaryOperatorAlternatives_0_1_0 = (Alternatives)cUnaryOperatorAssignment_0_1.eContents().get(0);
		private final Keyword cUnaryOperatorTildeKeyword_0_1_0_0 = (Keyword)cUnaryOperatorAlternatives_0_1_0.eContents().get(0);
		private final Keyword cUnaryOperatorHyphenMinusKeyword_0_1_0_1 = (Keyword)cUnaryOperatorAlternatives_0_1_0.eContents().get(1);
		private final Keyword cUnaryOperatorNotKeyword_0_1_0_2 = (Keyword)cUnaryOperatorAlternatives_0_1_0.eContents().get(2);
		private final Keyword cUnaryOperatorNumberSignKeyword_0_1_0_3 = (Keyword)cUnaryOperatorAlternatives_0_1_0.eContents().get(3);
		private final Keyword cUnaryOperatorOldKeyword_0_1_0_4 = (Keyword)cUnaryOperatorAlternatives_0_1_0.eContents().get(4);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionAstExpressionPostfixParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final RuleCall cAstExpressionPostfixParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AstExpressionUnary returns AstExpression:
		//	{AstExpressionUnary} unaryOperator=("~" | "-" | "not" | "#" | "old") expression=AstExpressionPostfix |
		//	AstExpressionPostfix;
		public ParserRule getRule() { return rule; }

		//{AstExpressionUnary} unaryOperator=("~" | "-" | "not" | "#" | "old") expression=AstExpressionPostfix |
		//AstExpressionPostfix
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AstExpressionUnary} unaryOperator=("~" | "-" | "not" | "#" | "old") expression=AstExpressionPostfix
		public Group getGroup_0() { return cGroup_0; }

		//{AstExpressionUnary}
		public Action getAstExpressionUnaryAction_0_0() { return cAstExpressionUnaryAction_0_0; }

		//unaryOperator=("~" | "-" | "not" | "#" | "old")
		public Assignment getUnaryOperatorAssignment_0_1() { return cUnaryOperatorAssignment_0_1; }

		//"~" | "-" | "not" | "#" | "old"
		public Alternatives getUnaryOperatorAlternatives_0_1_0() { return cUnaryOperatorAlternatives_0_1_0; }

		//"~"
		public Keyword getUnaryOperatorTildeKeyword_0_1_0_0() { return cUnaryOperatorTildeKeyword_0_1_0_0; }

		//"-"
		public Keyword getUnaryOperatorHyphenMinusKeyword_0_1_0_1() { return cUnaryOperatorHyphenMinusKeyword_0_1_0_1; }

		//"not"
		public Keyword getUnaryOperatorNotKeyword_0_1_0_2() { return cUnaryOperatorNotKeyword_0_1_0_2; }

		//"#"
		public Keyword getUnaryOperatorNumberSignKeyword_0_1_0_3() { return cUnaryOperatorNumberSignKeyword_0_1_0_3; }

		//"old"
		public Keyword getUnaryOperatorOldKeyword_0_1_0_4() { return cUnaryOperatorOldKeyword_0_1_0_4; }

		//expression=AstExpressionPostfix
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }

		//AstExpressionPostfix
		public RuleCall getExpressionAstExpressionPostfixParserRuleCall_0_2_0() { return cExpressionAstExpressionPostfixParserRuleCall_0_2_0; }

		//AstExpressionPostfix
		public RuleCall getAstExpressionPostfixParserRuleCall_1() { return cAstExpressionPostfixParserRuleCall_1; }
	}

	public class AstExpressionPostfixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstExpressionPostfix");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAstExpressionListParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAstExpressionSymbolReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAstExpressionIfParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAstExpressionLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cAstExpressionParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//AstExpressionPostfix returns AstExpression:
		//	AstExpressionList | AstExpressionSymbolReference | AstExpressionIf | AstExpressionLiteral | "(" AstExpression ")";
		public ParserRule getRule() { return rule; }

		//AstExpressionList | AstExpressionSymbolReference | AstExpressionIf | AstExpressionLiteral | "(" AstExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//AstExpressionList
		public RuleCall getAstExpressionListParserRuleCall_0() { return cAstExpressionListParserRuleCall_0; }

		//AstExpressionSymbolReference
		public RuleCall getAstExpressionSymbolReferenceParserRuleCall_1() { return cAstExpressionSymbolReferenceParserRuleCall_1; }

		//AstExpressionIf
		public RuleCall getAstExpressionIfParserRuleCall_2() { return cAstExpressionIfParserRuleCall_2; }

		//AstExpressionLiteral
		public RuleCall getAstExpressionLiteralParserRuleCall_3() { return cAstExpressionLiteralParserRuleCall_3; }

		//"(" AstExpression ")"
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//AstExpression
		public RuleCall getAstExpressionParserRuleCall_4_1() { return cAstExpressionParserRuleCall_4_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
	}

	public class AstExpressionSymbolReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstExpressionSymbolReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSymbolAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSymbolAstVariableCrossReference_0_0 = (CrossReference)cSymbolAssignment_0.eContents().get(0);
		private final RuleCall cSymbolAstVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cSymbolAstVariableCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndexesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexesAstExpressionParserRuleCall_1_1_0 = (RuleCall)cIndexesAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cMemberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMemberAstMemberAccessParserRuleCall_2_0 = (RuleCall)cMemberAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCtorAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCtorIDTerminalRuleCall_3_1_0 = (RuleCall)cCtorAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cCallAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cCallLeftParenthesisKeyword_4_0_0 = (Keyword)cCallAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cParametersAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cParametersAstExpressionParserRuleCall_4_1_0_0 = (RuleCall)cParametersAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cParametersAstExpressionParserRuleCall_4_1_1_1_0 = (RuleCall)cParametersAssignment_4_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//AstExpressionSymbolReference:
		//	symbol=[AstVariable] ("[" indexes+=AstExpression "]")* member+=AstMemberAccess* ("::" ctor=ID)? (call?="("
		//	(parameters+=AstExpression ("," parameters+=AstExpression)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//symbol=[AstVariable] ("[" indexes+=AstExpression "]")* member+=AstMemberAccess* ("::" ctor=ID)? (call?="("
		//(parameters+=AstExpression ("," parameters+=AstExpression)*)? ")")?
		public Group getGroup() { return cGroup; }

		//symbol=[AstVariable]
		public Assignment getSymbolAssignment_0() { return cSymbolAssignment_0; }

		//[AstVariable]
		public CrossReference getSymbolAstVariableCrossReference_0_0() { return cSymbolAstVariableCrossReference_0_0; }

		//ID
		public RuleCall getSymbolAstVariableIDTerminalRuleCall_0_0_1() { return cSymbolAstVariableIDTerminalRuleCall_0_0_1; }

		//("[" indexes+=AstExpression "]")*
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//indexes+=AstExpression
		public Assignment getIndexesAssignment_1_1() { return cIndexesAssignment_1_1; }

		//AstExpression
		public RuleCall getIndexesAstExpressionParserRuleCall_1_1_0() { return cIndexesAstExpressionParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//member+=AstMemberAccess*
		public Assignment getMemberAssignment_2() { return cMemberAssignment_2; }

		//AstMemberAccess
		public RuleCall getMemberAstMemberAccessParserRuleCall_2_0() { return cMemberAstMemberAccessParserRuleCall_2_0; }

		//("::" ctor=ID)?
		public Group getGroup_3() { return cGroup_3; }

		//"::"
		public Keyword getColonColonKeyword_3_0() { return cColonColonKeyword_3_0; }

		//ctor=ID
		public Assignment getCtorAssignment_3_1() { return cCtorAssignment_3_1; }

		//ID
		public RuleCall getCtorIDTerminalRuleCall_3_1_0() { return cCtorIDTerminalRuleCall_3_1_0; }

		//(call?="(" (parameters+=AstExpression ("," parameters+=AstExpression)*)? ")")?
		public Group getGroup_4() { return cGroup_4; }

		//call?="("
		public Assignment getCallAssignment_4_0() { return cCallAssignment_4_0; }

		//"("
		public Keyword getCallLeftParenthesisKeyword_4_0_0() { return cCallLeftParenthesisKeyword_4_0_0; }

		//(parameters+=AstExpression ("," parameters+=AstExpression)*)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//parameters+=AstExpression
		public Assignment getParametersAssignment_4_1_0() { return cParametersAssignment_4_1_0; }

		//AstExpression
		public RuleCall getParametersAstExpressionParserRuleCall_4_1_0_0() { return cParametersAstExpressionParserRuleCall_4_1_0_0; }

		//("," parameters+=AstExpression)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//","
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }

		//parameters+=AstExpression
		public Assignment getParametersAssignment_4_1_1_1() { return cParametersAssignment_4_1_1_1; }

		//AstExpression
		public RuleCall getParametersAstExpressionParserRuleCall_4_1_1_1_0() { return cParametersAstExpressionParserRuleCall_4_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
	}

	public class AstExpressionIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstExpressionIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionAstExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenAstExpressionParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		private final Keyword cElseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElseAstExpressionParserRuleCall_5_0 = (RuleCall)cElseAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AstExpressionIf:
		//	"if" condition=AstExpression "then" then=AstExpression "else" else=AstExpression "end";
		public ParserRule getRule() { return rule; }

		//"if" condition=AstExpression "then" then=AstExpression "else" else=AstExpression "end"
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//condition=AstExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//AstExpression
		public RuleCall getConditionAstExpressionParserRuleCall_1_0() { return cConditionAstExpressionParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//then=AstExpression
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }

		//AstExpression
		public RuleCall getThenAstExpressionParserRuleCall_3_0() { return cThenAstExpressionParserRuleCall_3_0; }

		//"else"
		public Keyword getElseKeyword_4() { return cElseKeyword_4; }

		//else=AstExpression
		public Assignment getElseAssignment_5() { return cElseAssignment_5; }

		//AstExpression
		public RuleCall getElseAstExpressionParserRuleCall_5_0() { return cElseAstExpressionParserRuleCall_5_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}

	public class AstExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionsAstExpressionParserRuleCall_1_0 = (RuleCall)cExpressionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionsAstExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGeneratorsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGeneratorsAstGeneratorParserRuleCall_3_1_0 = (RuleCall)cGeneratorsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cGeneratorsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cGeneratorsAstGeneratorParserRuleCall_3_2_1_0 = (RuleCall)cGeneratorsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AstExpressionList:
		//	"[" expressions+=AstExpression ("," expressions+=AstExpression)* (":" generators+=AstGenerator (","
		//	generators+=AstGenerator)*)? "]";
		public ParserRule getRule() { return rule; }

		//"[" expressions+=AstExpression ("," expressions+=AstExpression)* (":" generators+=AstGenerator (","
		//generators+=AstGenerator)*)? "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//expressions+=AstExpression
		public Assignment getExpressionsAssignment_1() { return cExpressionsAssignment_1; }

		//AstExpression
		public RuleCall getExpressionsAstExpressionParserRuleCall_1_0() { return cExpressionsAstExpressionParserRuleCall_1_0; }

		//("," expressions+=AstExpression)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//expressions+=AstExpression
		public Assignment getExpressionsAssignment_2_1() { return cExpressionsAssignment_2_1; }

		//AstExpression
		public RuleCall getExpressionsAstExpressionParserRuleCall_2_1_0() { return cExpressionsAstExpressionParserRuleCall_2_1_0; }

		//(":" generators+=AstGenerator ("," generators+=AstGenerator)*)?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//generators+=AstGenerator
		public Assignment getGeneratorsAssignment_3_1() { return cGeneratorsAssignment_3_1; }

		//AstGenerator
		public RuleCall getGeneratorsAstGeneratorParserRuleCall_3_1_0() { return cGeneratorsAstGeneratorParserRuleCall_3_1_0; }

		//("," generators+=AstGenerator)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//generators+=AstGenerator
		public Assignment getGeneratorsAssignment_3_2_1() { return cGeneratorsAssignment_3_2_1; }

		//AstGenerator
		public RuleCall getGeneratorsAstGeneratorParserRuleCall_3_2_1_0() { return cGeneratorsAstGeneratorParserRuleCall_3_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class AstGeneratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstGenerator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableAstVariableDeclarationParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionAstExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//AstGenerator:
		//	"for" variable=AstVariableDeclaration "in" expression=AstExpression;
		public ParserRule getRule() { return rule; }

		//"for" variable=AstVariableDeclaration "in" expression=AstExpression
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//variable=AstVariableDeclaration
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//AstVariableDeclaration
		public RuleCall getVariableAstVariableDeclarationParserRuleCall_1_0() { return cVariableAstVariableDeclarationParserRuleCall_1_0; }

		//"in"
		public Keyword getInKeyword_2() { return cInKeyword_2; }

		//expression=AstExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//AstExpression
		public RuleCall getExpressionAstExpressionParserRuleCall_3_0() { return cExpressionAstExpressionParserRuleCall_3_0; }
	}

	public class AstExpressionLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstExpressionLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAstExpressionBooleanParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAstExpressionFloatParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAstExpressionIntegerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAstExpressionStringParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		////AstExpressionVariable: value=[AstVariable] ('[' indexes += AstExpression ']')* (member += AstMemberAccess)*;
		/////////////////////////////////////////////////////////////////////////////////
		//// literal expressions
		/////////////////////////////////////////////////////////////////////////////////
		//AstExpressionLiteral:
		//	AstExpressionBoolean | AstExpressionFloat | AstExpressionInteger | AstExpressionString;
		public ParserRule getRule() { return rule; }

		//AstExpressionBoolean | AstExpressionFloat | AstExpressionInteger | AstExpressionString
		public Alternatives getAlternatives() { return cAlternatives; }

		//AstExpressionBoolean
		public RuleCall getAstExpressionBooleanParserRuleCall_0() { return cAstExpressionBooleanParserRuleCall_0; }

		//AstExpressionFloat
		public RuleCall getAstExpressionFloatParserRuleCall_1() { return cAstExpressionFloatParserRuleCall_1; }

		//AstExpressionInteger
		public RuleCall getAstExpressionIntegerParserRuleCall_2() { return cAstExpressionIntegerParserRuleCall_2; }

		//AstExpressionString
		public RuleCall getAstExpressionStringParserRuleCall_3() { return cAstExpressionStringParserRuleCall_3; }
	}

	public class AstExpressionBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstExpressionBoolean");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOLTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//AstExpressionBoolean:
		//	value=BOOL;
		public ParserRule getRule() { return rule; }

		//value=BOOL
		public Assignment getValueAssignment() { return cValueAssignment; }

		//BOOL
		public RuleCall getValueBOOLTerminalRuleCall_0() { return cValueBOOLTerminalRuleCall_0; }
	}

	public class AstExpressionFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstExpressionFloat");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueREALParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//AstExpressionFloat:
		//	value=REAL;
		public ParserRule getRule() { return rule; }

		//value=REAL
		public Assignment getValueAssignment() { return cValueAssignment; }

		//REAL
		public RuleCall getValueREALParserRuleCall_0() { return cValueREALParserRuleCall_0; }
	}

	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "REAL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final RuleCall cEXP_INTTerminalRuleCall_0_2_0 = (RuleCall)cAlternatives_0_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_2_1 = (RuleCall)cAlternatives_0_2.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cEXP_INTTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		
		//REAL returns ecore::EFloat hidden():
		//	INT "." (EXP_INT | INT) | "." (EXP_INT | INT);
		public ParserRule getRule() { return rule; }

		//INT "." (EXP_INT | INT) | "." (EXP_INT | INT)
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT "." (EXP_INT | INT)
		public Group getGroup_0() { return cGroup_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_0() { return cINTTerminalRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//EXP_INT | INT
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }

		//EXP_INT
		public RuleCall getEXP_INTTerminalRuleCall_0_2_0() { return cEXP_INTTerminalRuleCall_0_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_2_1() { return cINTTerminalRuleCall_0_2_1; }

		//"." (EXP_INT | INT)
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//EXP_INT | INT
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//EXP_INT
		public RuleCall getEXP_INTTerminalRuleCall_1_1_0() { return cEXP_INTTerminalRuleCall_1_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1_1() { return cINTTerminalRuleCall_1_1_1; }
	}

	public class AstExpressionIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstExpressionInteger");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAlternatives_0.eContents().get(0);
		private final RuleCall cValueEXP_INTTerminalRuleCall_0_1 = (RuleCall)cValueAlternatives_0.eContents().get(1);
		private final RuleCall cValueHEXTerminalRuleCall_0_2 = (RuleCall)cValueAlternatives_0.eContents().get(2);
		
		//AstExpressionInteger:
		//	value=(INT | EXP_INT | HEX);
		public ParserRule getRule() { return rule; }

		//value=(INT | EXP_INT | HEX)
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT | EXP_INT | HEX
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }

		//EXP_INT
		public RuleCall getValueEXP_INTTerminalRuleCall_0_1() { return cValueEXP_INTTerminalRuleCall_0_1; }

		//HEX
		public RuleCall getValueHEXTerminalRuleCall_0_2() { return cValueHEXTerminalRuleCall_0_2; }
	}

	public class AstExpressionStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstExpressionString");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//AstExpressionString:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class AstTypeUserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstTypeUser");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstTypeUserAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// type and variable declarations
		/////////////////////////////////////////////////////////////////////////////////
		////AstTypeUser returns AstVariable: {AstTypeUser} ID | AstTypeBuiltIn;
		//AstTypeUser returns AstVariable:
		//	{AstTypeUser} ID;
		public ParserRule getRule() { return rule; }

		//{AstTypeUser} ID
		public Group getGroup() { return cGroup; }

		//{AstTypeUser}
		public Action getAstTypeUserAction_0() { return cAstTypeUserAction_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class AstTypeBuiltInElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstTypeBuiltIn");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUintKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFloatKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBoolKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cListKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cStringKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cByteKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cShortKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//AstTypeBuiltIn:
		//	"int" | "uint" | "float" | "bool" | "List" | "string" | "byte" | "short";
		public ParserRule getRule() { return rule; }

		//"int" | "uint" | "float" | "bool" | "List" | "string" | "byte" | "short"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"int"
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }

		//"uint"
		public Keyword getUintKeyword_1() { return cUintKeyword_1; }

		//"float"
		public Keyword getFloatKeyword_2() { return cFloatKeyword_2; }

		//"bool"
		public Keyword getBoolKeyword_3() { return cBoolKeyword_3; }

		//"List"
		public Keyword getListKeyword_4() { return cListKeyword_4; }

		//"string"
		public Keyword getStringKeyword_5() { return cStringKeyword_5; }

		//"byte"
		public Keyword getByteKeyword_6() { return cByteKeyword_6; }

		//"short"
		public Keyword getShortKeyword_7() { return cShortKeyword_7; }
	}

	public class AstTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cBuiltinAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cBuiltinAstTypeBuiltInParserRuleCall_1_0_0_0 = (RuleCall)cBuiltinAssignment_1_0_0.eContents().get(0);
		private final Assignment cTypeParamsAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cTypeParamsAstTypeParameterListParserRuleCall_1_0_1_0 = (RuleCall)cTypeParamsAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cDimensionsAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cDimensionsAstExpressionParserRuleCall_1_0_2_1_0 = (RuleCall)cDimensionsAssignment_1_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_2_2 = (Keyword)cGroup_1_0_2.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final CrossReference cNameAstTypeUserCrossReference_1_1_0_0 = (CrossReference)cNameAssignment_1_1_0.eContents().get(0);
		private final RuleCall cNameAstTypeUserIDTerminalRuleCall_1_1_0_0_1 = (RuleCall)cNameAstTypeUserCrossReference_1_1_0_0.eContents().get(1);
		private final Assignment cTypeParamsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTypeParamsAstTypeParameterListParserRuleCall_1_1_1_0 = (RuleCall)cTypeParamsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cDimensionsAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cDimensionsAstExpressionParserRuleCall_1_1_2_1_0 = (RuleCall)cDimensionsAssignment_1_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_2_2 = (Keyword)cGroup_1_1_2.eContents().get(2);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Assignment cDomainAssignment_1_2_1_0 = (Assignment)cGroup_1_2_1.eContents().get(0);
		private final RuleCall cDomainAstTypeParserRuleCall_1_2_1_0_0 = (RuleCall)cDomainAssignment_1_2_1_0.eContents().get(0);
		private final Group cGroup_1_2_1_1 = (Group)cGroup_1_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_1_1_0 = (Keyword)cGroup_1_2_1_1.eContents().get(0);
		private final Assignment cDomainAssignment_1_2_1_1_1 = (Assignment)cGroup_1_2_1_1.eContents().get(1);
		private final RuleCall cDomainAstTypeParserRuleCall_1_2_1_1_1_0 = (RuleCall)cDomainAssignment_1_2_1_1_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Group cGroup_1_2_3 = (Group)cGroup_1_2.eContents().get(3);
		private final Assignment cCodomainAssignment_1_2_3_0 = (Assignment)cGroup_1_2_3.eContents().get(0);
		private final RuleCall cCodomainAstTypeParserRuleCall_1_2_3_0_0 = (RuleCall)cCodomainAssignment_1_2_3_0.eContents().get(0);
		private final Group cGroup_1_2_3_1 = (Group)cGroup_1_2_3.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_3_1_0 = (Keyword)cGroup_1_2_3_1.eContents().get(0);
		private final Assignment cDomainAssignment_1_2_3_1_1 = (Assignment)cGroup_1_2_3_1.eContents().get(1);
		private final RuleCall cDomainAstTypeParserRuleCall_1_2_3_1_1_0 = (RuleCall)cDomainAssignment_1_2_3_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_4 = (Keyword)cGroup_1_2.eContents().get(4);
		
		//AstType:
		//	{AstType} (builtin=AstTypeBuiltIn typeParams=AstTypeParameterList? ("[" dimensions+=AstExpression "]")* |
		//	name=[AstTypeUser] typeParams=AstTypeParameterList? ("[" dimensions+=AstExpression "]")* | "[" (domain+=AstType (","
		//	domain+=AstType)*)? "-->" (codomain+=AstType ("," domain+=AstType)*)? "]");
		public ParserRule getRule() { return rule; }

		//{AstType} (builtin=AstTypeBuiltIn typeParams=AstTypeParameterList? ("[" dimensions+=AstExpression "]")* |
		//name=[AstTypeUser] typeParams=AstTypeParameterList? ("[" dimensions+=AstExpression "]")* | "[" (domain+=AstType (","
		//domain+=AstType)*)? "-->" (codomain+=AstType ("," domain+=AstType)*)? "]")
		public Group getGroup() { return cGroup; }

		//{AstType}
		public Action getAstTypeAction_0() { return cAstTypeAction_0; }

		//builtin=AstTypeBuiltIn typeParams=AstTypeParameterList? ("[" dimensions+=AstExpression "]")* | name=[AstTypeUser]
		//typeParams=AstTypeParameterList? ("[" dimensions+=AstExpression "]")* | "[" (domain+=AstType ("," domain+=AstType)*)?
		//"-->" (codomain+=AstType ("," domain+=AstType)*)? "]"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//builtin=AstTypeBuiltIn typeParams=AstTypeParameterList? ("[" dimensions+=AstExpression "]")*
		public Group getGroup_1_0() { return cGroup_1_0; }

		//builtin=AstTypeBuiltIn
		public Assignment getBuiltinAssignment_1_0_0() { return cBuiltinAssignment_1_0_0; }

		//AstTypeBuiltIn
		public RuleCall getBuiltinAstTypeBuiltInParserRuleCall_1_0_0_0() { return cBuiltinAstTypeBuiltInParserRuleCall_1_0_0_0; }

		//typeParams=AstTypeParameterList?
		public Assignment getTypeParamsAssignment_1_0_1() { return cTypeParamsAssignment_1_0_1; }

		//AstTypeParameterList
		public RuleCall getTypeParamsAstTypeParameterListParserRuleCall_1_0_1_0() { return cTypeParamsAstTypeParameterListParserRuleCall_1_0_1_0; }

		//("[" dimensions+=AstExpression "]")*
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_2_0() { return cLeftSquareBracketKeyword_1_0_2_0; }

		//dimensions+=AstExpression
		public Assignment getDimensionsAssignment_1_0_2_1() { return cDimensionsAssignment_1_0_2_1; }

		//AstExpression
		public RuleCall getDimensionsAstExpressionParserRuleCall_1_0_2_1_0() { return cDimensionsAstExpressionParserRuleCall_1_0_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_2_2() { return cRightSquareBracketKeyword_1_0_2_2; }

		//name=[AstTypeUser] typeParams=AstTypeParameterList? ("[" dimensions+=AstExpression "]")*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//name=[AstTypeUser]
		public Assignment getNameAssignment_1_1_0() { return cNameAssignment_1_1_0; }

		//[AstTypeUser]
		public CrossReference getNameAstTypeUserCrossReference_1_1_0_0() { return cNameAstTypeUserCrossReference_1_1_0_0; }

		//ID
		public RuleCall getNameAstTypeUserIDTerminalRuleCall_1_1_0_0_1() { return cNameAstTypeUserIDTerminalRuleCall_1_1_0_0_1; }

		//typeParams=AstTypeParameterList?
		public Assignment getTypeParamsAssignment_1_1_1() { return cTypeParamsAssignment_1_1_1; }

		//AstTypeParameterList
		public RuleCall getTypeParamsAstTypeParameterListParserRuleCall_1_1_1_0() { return cTypeParamsAstTypeParameterListParserRuleCall_1_1_1_0; }

		//("[" dimensions+=AstExpression "]")*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_2_0() { return cLeftSquareBracketKeyword_1_1_2_0; }

		//dimensions+=AstExpression
		public Assignment getDimensionsAssignment_1_1_2_1() { return cDimensionsAssignment_1_1_2_1; }

		//AstExpression
		public RuleCall getDimensionsAstExpressionParserRuleCall_1_1_2_1_0() { return cDimensionsAstExpressionParserRuleCall_1_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_2_2() { return cRightSquareBracketKeyword_1_1_2_2; }

		//"[" (domain+=AstType ("," domain+=AstType)*)? "-->" (codomain+=AstType ("," domain+=AstType)*)? "]"
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2_0() { return cLeftSquareBracketKeyword_1_2_0; }

		//(domain+=AstType ("," domain+=AstType)*)?
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }

		//domain+=AstType
		public Assignment getDomainAssignment_1_2_1_0() { return cDomainAssignment_1_2_1_0; }

		//AstType
		public RuleCall getDomainAstTypeParserRuleCall_1_2_1_0_0() { return cDomainAstTypeParserRuleCall_1_2_1_0_0; }

		//("," domain+=AstType)*
		public Group getGroup_1_2_1_1() { return cGroup_1_2_1_1; }

		//","
		public Keyword getCommaKeyword_1_2_1_1_0() { return cCommaKeyword_1_2_1_1_0; }

		//domain+=AstType
		public Assignment getDomainAssignment_1_2_1_1_1() { return cDomainAssignment_1_2_1_1_1; }

		//AstType
		public RuleCall getDomainAstTypeParserRuleCall_1_2_1_1_1_0() { return cDomainAstTypeParserRuleCall_1_2_1_1_1_0; }

		//"-->"
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_1_2_2() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_1_2_2; }

		//(codomain+=AstType ("," domain+=AstType)*)?
		public Group getGroup_1_2_3() { return cGroup_1_2_3; }

		//codomain+=AstType
		public Assignment getCodomainAssignment_1_2_3_0() { return cCodomainAssignment_1_2_3_0; }

		//AstType
		public RuleCall getCodomainAstTypeParserRuleCall_1_2_3_0_0() { return cCodomainAstTypeParserRuleCall_1_2_3_0_0; }

		//("," domain+=AstType)*
		public Group getGroup_1_2_3_1() { return cGroup_1_2_3_1; }

		//","
		public Keyword getCommaKeyword_1_2_3_1_0() { return cCommaKeyword_1_2_3_1_0; }

		//domain+=AstType
		public Assignment getDomainAssignment_1_2_3_1_1() { return cDomainAssignment_1_2_3_1_1; }

		//AstType
		public RuleCall getDomainAstTypeParserRuleCall_1_2_3_1_1_0() { return cDomainAstTypeParserRuleCall_1_2_3_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2_4() { return cRightSquareBracketKeyword_1_2_4; }
	}

	public class AstTypeParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstTypeParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamsAstTypeParamParserRuleCall_1_0 = (RuleCall)cParamsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsAstTypeParamParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AstTypeParameterList:
		//	"(" params+=AstTypeParam ("," params+=AstTypeParam)* ")";
		public ParserRule getRule() { return rule; }

		//"(" params+=AstTypeParam ("," params+=AstTypeParam)* ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//params+=AstTypeParam
		public Assignment getParamsAssignment_1() { return cParamsAssignment_1; }

		//AstTypeParam
		public RuleCall getParamsAstTypeParamParserRuleCall_1_0() { return cParamsAstTypeParamParserRuleCall_1_0; }

		//("," params+=AstTypeParam)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//params+=AstTypeParam
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//AstTypeParam
		public RuleCall getParamsAstTypeParamParserRuleCall_2_1_0() { return cParamsAstTypeParamParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AstTypeParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstTypeParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueAstExpressionParserRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cNameAlternatives_1_0_0 = (Alternatives)cNameAssignment_1_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0_0 = (RuleCall)cNameAlternatives_1_0_0.eContents().get(0);
		private final Keyword cNameTypeKeyword_1_0_0_1 = (Keyword)cNameAlternatives_1_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypeAstTypeParserRuleCall_1_2_0 = (RuleCall)cTypeAssignment_1_2.eContents().get(0);
		
		//AstTypeParam:
		//	name=ID "=" value=AstExpression | name=(ID | "type") ":" type=AstType;
		public ParserRule getRule() { return rule; }

		//name=ID "=" value=AstExpression | name=(ID | "type") ":" type=AstType
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=ID "=" value=AstExpression
		public Group getGroup_0() { return cGroup_0; }

		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//value=AstExpression
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }

		//AstExpression
		public RuleCall getValueAstExpressionParserRuleCall_0_2_0() { return cValueAstExpressionParserRuleCall_0_2_0; }

		//name=(ID | "type") ":" type=AstType
		public Group getGroup_1() { return cGroup_1; }

		//name=(ID | "type")
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//ID | "type"
		public Alternatives getNameAlternatives_1_0_0() { return cNameAlternatives_1_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0_0() { return cNameIDTerminalRuleCall_1_0_0_0; }

		//"type"
		public Keyword getNameTypeKeyword_1_0_0_1() { return cNameTypeKeyword_1_0_0_1; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//type=AstType
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }

		//AstType
		public RuleCall getTypeAstTypeParserRuleCall_1_2_0() { return cTypeAstTypeParserRuleCall_1_2_0; }
	}

	public class AstVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeAstTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDimensionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDimensionsAstExpressionParserRuleCall_3_1_0 = (RuleCall)cDimensionsAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//AstVariableDeclaration returns AstVariable:
		//	annotations+=AstAnnotation* type=AstType name=ID ("[" dimensions+=AstExpression "]")*;
		public ParserRule getRule() { return rule; }

		//annotations+=AstAnnotation* type=AstType name=ID ("[" dimensions+=AstExpression "]")*
		public Group getGroup() { return cGroup; }

		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_0_0() { return cAnnotationsAstAnnotationParserRuleCall_0_0; }

		//type=AstType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//AstType
		public RuleCall getTypeAstTypeParserRuleCall_1_0() { return cTypeAstTypeParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("[" dimensions+=AstExpression "]")*
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//dimensions+=AstExpression
		public Assignment getDimensionsAssignment_3_1() { return cDimensionsAssignment_3_1; }

		//AstExpression
		public RuleCall getDimensionsAstExpressionParserRuleCall_3_1_0() { return cDimensionsAstExpressionParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
	}

	public class AstValuedVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstValuedVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstVariableDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cConstantAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final Keyword cConstantEqualsSignKeyword_1_0_0_0 = (Keyword)cConstantAssignment_1_0_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueAstExpressionParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//AstValuedVariableDeclaration returns AstVariable:
		//	AstVariableDeclaration ((constant?="=" | ":=") value=AstExpression)?;
		public ParserRule getRule() { return rule; }

		//AstVariableDeclaration ((constant?="=" | ":=") value=AstExpression)?
		public Group getGroup() { return cGroup; }

		//AstVariableDeclaration
		public RuleCall getAstVariableDeclarationParserRuleCall_0() { return cAstVariableDeclarationParserRuleCall_0; }

		//((constant?="=" | ":=") value=AstExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//constant?="=" | ":="
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//constant?="="
		public Assignment getConstantAssignment_1_0_0() { return cConstantAssignment_1_0_0; }

		//"="
		public Keyword getConstantEqualsSignKeyword_1_0_0_0() { return cConstantEqualsSignKeyword_1_0_0_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1_0_1() { return cColonEqualsSignKeyword_1_0_1; }

		//value=AstExpression
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//AstExpression
		public RuleCall getValueAstExpressionParserRuleCall_1_1_0() { return cValueAstExpressionParserRuleCall_1_1_0; }
	}

	public class AstMemberAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstMemberAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMemberIndexAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMemberIndexAstExpressionParserRuleCall_2_1_0 = (RuleCall)cMemberIndexAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//AstMemberAccess:
		//	"." name=ID ("[" memberIndex+=AstExpression "]")*;
		public ParserRule getRule() { return rule; }

		//"." name=ID ("[" memberIndex+=AstExpression "]")*
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("[" memberIndex+=AstExpression "]")*
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//memberIndex+=AstExpression
		public Assignment getMemberIndexAssignment_2_1() { return cMemberIndexAssignment_2_1; }

		//AstExpression
		public RuleCall getMemberIndexAstExpressionParserRuleCall_2_1_0() { return cMemberIndexAstExpressionParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
	}

	public class AstAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentsAstAnnotationArgumentParserRuleCall_2_1_0 = (RuleCall)cArgumentsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cArgumentsAstAnnotationArgumentParserRuleCall_2_2_1_0 = (RuleCall)cArgumentsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// annotations
		/////////////////////////////////////////////////////////////////////////////////
		//AstAnnotation:
		//	"@" name=ID ("(" arguments+=AstAnnotationArgument ("," arguments+=AstAnnotationArgument)* ")")?;
		public ParserRule getRule() { return rule; }

		//"@" name=ID ("(" arguments+=AstAnnotationArgument ("," arguments+=AstAnnotationArgument)* ")")?
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("(" arguments+=AstAnnotationArgument ("," arguments+=AstAnnotationArgument)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//arguments+=AstAnnotationArgument
		public Assignment getArgumentsAssignment_2_1() { return cArgumentsAssignment_2_1; }

		//AstAnnotationArgument
		public RuleCall getArgumentsAstAnnotationArgumentParserRuleCall_2_1_0() { return cArgumentsAstAnnotationArgumentParserRuleCall_2_1_0; }

		//("," arguments+=AstAnnotationArgument)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//arguments+=AstAnnotationArgument
		public Assignment getArgumentsAssignment_2_2_1() { return cArgumentsAssignment_2_2_1; }

		//AstAnnotationArgument
		public RuleCall getArgumentsAstAnnotationArgumentParserRuleCall_2_2_1_0() { return cArgumentsAstAnnotationArgumentParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class AstAnnotationArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AstAnnotationArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//AstAnnotationArgument:
		//	name=ID "=" value=STRING;
		public ParserRule getRule() { return rule; }

		//name=ID "=" value=STRING
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	
	
	private AstTopElements pAstTop;
	private AstPackageElements pAstPackage;
	private AstUnitElements pAstUnit;
	private AstNamespaceElements pAstNamespace;
	private AstEntityElements pAstEntity;
	private AstAbstractActorElements pAstAbstractActor;
	private ImportElements pImport;
	private QualifiedNameElements pQualifiedName;
	private QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private AstNetworkElements pAstNetwork;
	private AstActorDeclarationElements pAstActorDeclaration;
	private AstAssignParameterElements pAstAssignParameter;
	private AstStructureElements pAstStructure;
	private AstConnectionElements pAstConnection;
	private AstActorVariableReferenceElements pAstActorVariableReference;
	private AstConnectionAttributeElements pAstConnectionAttribute;
	private AstConstantVariableElements pAstConstantVariable;
	private AstExternalVariableElements pAstExternalVariable;
	private AstTypeDefinitionElements pAstTypeDefinition;
	private AstTypeDefinitionParameterElements pAstTypeDefinitionParameter;
	private AstTypeDefinitionTypeParameterElements pAstTypeDefinitionTypeParameter;
	private AstTaggedTupleElements pAstTaggedTuple;
	private AstTupleElements pAstTuple;
	private AstActorElements pAstActor;
	private AstPortElements pAstPort;
	private AstFunctionElements pAstFunction;
	private AstExternalFunctionElements pAstExternalFunction;
	private AstProcedureElements pAstProcedure;
	private AstExternalProcedureElements pAstExternalProcedure;
	private AstParameterElements pAstParameter;
	private AstStateVariableElements pAstStateVariable;
	private AstTagElements pAstTag;
	private AstExternalActorElements pAstExternalActor;
	private AstInequalityElements pAstInequality;
	private AstPriorityElements pAstPriority;
	private AstScheduleElements pAstSchedule;
	private AstTransitionElements pAstTransition;
	private AstStateElements pAstState;
	private AstActionElements pAstAction;
	private AstInitializeElements pAstInitialize;
	private AstInputPatternElements pAstInputPattern;
	private AstTokenElements pAstToken;
	private AstOutputPatternElements pAstOutputPattern;
	private AstStatementAssignElements pAstStatementAssign;
	private AstStatementCallElements pAstStatementCall;
	private AstStatementForeachElements pAstStatementForeach;
	private AstForeachGeneratorElements pAstForeachGenerator;
	private AstStatementBlockElements pAstStatementBlock;
	private AstStatementIfElements pAstStatementIf;
	private AstStatementWhileElements pAstStatementWhile;
	private AstStatementElements pAstStatement;
	private AstExpressionElements pAstExpression;
	private AstExpressionAndElements pAstExpressionAnd;
	private AstExpressionBitorElements pAstExpressionBitor;
	private AstExpressionBitxorElements pAstExpressionBitxor;
	private AstExpressionBitandElements pAstExpressionBitand;
	private AstExpressionEqElements pAstExpressionEq;
	private AstExpressionRelationalElements pAstExpressionRelational;
	private AstExpressionShiftElements pAstExpressionShift;
	private AstExpressionAdditiveElements pAstExpressionAdditive;
	private AstExpressionMultiplicativeElements pAstExpressionMultiplicative;
	private AstExpressionExpElements pAstExpressionExp;
	private AstExpressionUnaryElements pAstExpressionUnary;
	private AstExpressionPostfixElements pAstExpressionPostfix;
	private AstExpressionSymbolReferenceElements pAstExpressionSymbolReference;
	private AstExpressionIfElements pAstExpressionIf;
	private AstExpressionListElements pAstExpressionList;
	private AstGeneratorElements pAstGenerator;
	private AstExpressionLiteralElements pAstExpressionLiteral;
	private AstExpressionBooleanElements pAstExpressionBoolean;
	private TerminalRule tBOOL;
	private AstExpressionFloatElements pAstExpressionFloat;
	private REALElements pREAL;
	private AstExpressionIntegerElements pAstExpressionInteger;
	private TerminalRule tEXP_INT;
	private TerminalRule tHEX;
	private TerminalRule tINT;
	private AstExpressionStringElements pAstExpressionString;
	private TerminalRule tSTRING;
	private TerminalRule tID;
	private AstTypeUserElements pAstTypeUser;
	private AstTypeBuiltInElements pAstTypeBuiltIn;
	private AstTypeElements pAstType;
	private AstTypeParameterListElements pAstTypeParameterList;
	private AstTypeParamElements pAstTypeParam;
	private AstVariableDeclarationElements pAstVariableDeclaration;
	private AstValuedVariableDeclarationElements pAstValuedVariableDeclaration;
	private AstMemberAccessElements pAstMemberAccess;
	private AstAnnotationElements pAstAnnotation;
	private AstAnnotationArgumentElements pAstAnnotationArgument;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public CalGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.caltoopia.frontend.Cal".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	/////////////////////////////////////////////////////////////////////////////////
	//// RVC compatibility layer
	/////////////////////////////////////////////////////////////////////////////////
	//AstTop:
	//	AstPackage | AstNamespace;
	public AstTopElements getAstTopAccess() {
		return (pAstTop != null) ? pAstTop : (pAstTop = new AstTopElements());
	}
	
	public ParserRule getAstTopRule() {
		return getAstTopAccess().getRule();
	}

	//AstPackage:
	//	{AstNamespace} "package" name=QualifiedName ";" (entities+=AstEntity | imports+=Import | units+=AstUnit)*;
	public AstPackageElements getAstPackageAccess() {
		return (pAstPackage != null) ? pAstPackage : (pAstPackage = new AstPackageElements());
	}
	
	public ParserRule getAstPackageRule() {
		return getAstPackageAccess().getRule();
	}

	//AstUnit:
	//	{AstNamespace} "unit" name=QualifiedName ":" (functions+=AstFunction | variables+=AstConstantVariable |
	//	externals+=(AstExternalVariable | AstExternalFunction | AstExternalProcedure))* "end";
	public AstUnitElements getAstUnitAccess() {
		return (pAstUnit != null) ? pAstUnit : (pAstUnit = new AstUnitElements());
	}
	
	public ParserRule getAstUnitRule() {
		return getAstUnitAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////////////////////
	//// namespace
	/////////////////////////////////////////////////////////////////////////////////
	//AstNamespace:
	//	annotations+=AstAnnotation* "namespace" name=QualifiedName ":" (functions+=AstFunction |
	//	variables+=AstConstantVariable | externals+=(AstExternalVariable | AstExternalFunction | AstExternalProcedure) |
	//	typedefs+=AstTypeDefinition | imports+=Import | entities+=AstEntity | namespaces+=AstNamespace)* "end";
	public AstNamespaceElements getAstNamespaceAccess() {
		return (pAstNamespace != null) ? pAstNamespace : (pAstNamespace = new AstNamespaceElements());
	}
	
	public ParserRule getAstNamespaceRule() {
		return getAstNamespaceAccess().getRule();
	}

	//AstEntity:
	//	annotations+=AstAnnotation* actor=AstAbstractActor;
	public AstEntityElements getAstEntityAccess() {
		return (pAstEntity != null) ? pAstEntity : (pAstEntity = new AstEntityElements());
	}
	
	public ParserRule getAstEntityRule() {
		return getAstEntityAccess().getRule();
	}

	//AstAbstractActor:
	//	AstActor | AstNetwork | AstExternalActor;
	public AstAbstractActorElements getAstAbstractActorAccess() {
		return (pAstAbstractActor != null) ? pAstAbstractActor : (pAstAbstractActor = new AstAbstractActorElements());
	}
	
	public ParserRule getAstAbstractActorRule() {
		return getAstAbstractActorAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildCard ";";
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedNameWithWildCard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return (pQualifiedNameWithWildCard != null) ? pQualifiedNameWithWildCard : (pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements());
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////////////////////
	//// network
	/////////////////////////////////////////////////////////////////////////////////
	//AstNetwork:
	//	{AstNetwork} "network" name=ID "(" (parameters+=AstParameter ("," parameters+=AstParameter)*)? ")" (inputs+=AstPort
	//	("," inputs+=AstPort)*)? "==>" (outputs+=AstPort ("," outputs+=AstPort)*)? ":" ("var"
	//	variables+=AstValuedVariableDeclaration ";" (variables+=AstValuedVariableDeclaration ";")*)? "entities"
	//	instances+=AstActorDeclaration+ structure=AstStructure "end";
	public AstNetworkElements getAstNetworkAccess() {
		return (pAstNetwork != null) ? pAstNetwork : (pAstNetwork = new AstNetworkElements());
	}
	
	public ParserRule getAstNetworkRule() {
		return getAstNetworkAccess().getRule();
	}

	//AstActorDeclaration returns AstActorVariable:
	//	name=ID "=" type=[AstEntity|QualifiedName] "(" (parameters+=AstAssignParameter ("," parameters+=AstAssignParameter)*)?
	//	")" ";";
	public AstActorDeclarationElements getAstActorDeclarationAccess() {
		return (pAstActorDeclaration != null) ? pAstActorDeclaration : (pAstActorDeclaration = new AstActorDeclarationElements());
	}
	
	public ParserRule getAstActorDeclarationRule() {
		return getAstActorDeclarationAccess().getRule();
	}

	//AstAssignParameter:
	//	name=ID "=" value=AstExpression;
	public AstAssignParameterElements getAstAssignParameterAccess() {
		return (pAstAssignParameter != null) ? pAstAssignParameter : (pAstAssignParameter = new AstAssignParameterElements());
	}
	
	public ParserRule getAstAssignParameterRule() {
		return getAstAssignParameterAccess().getRule();
	}

	//AstStructure:
	//	"structure" connections+=AstConnection+;
	public AstStructureElements getAstStructureAccess() {
		return (pAstStructure != null) ? pAstStructure : (pAstStructure = new AstStructureElements());
	}
	
	public ParserRule getAstStructureRule() {
		return getAstStructureAccess().getRule();
	}

	//AstConnection:
	//	(from=AstActorVariableReference ".")? outPort=ID "-->" (to=AstActorVariableReference ".")? inPort=ID ("{"
	//	attribute+=AstConnectionAttribute* "}")? ";";
	public AstConnectionElements getAstConnectionAccess() {
		return (pAstConnection != null) ? pAstConnection : (pAstConnection = new AstConnectionElements());
	}
	
	public ParserRule getAstConnectionRule() {
		return getAstConnectionAccess().getRule();
	}

	//AstActorVariableReference:
	//	variable=[AstActorVariable];
	public AstActorVariableReferenceElements getAstActorVariableReferenceAccess() {
		return (pAstActorVariableReference != null) ? pAstActorVariableReference : (pAstActorVariableReference = new AstActorVariableReferenceElements());
	}
	
	public ParserRule getAstActorVariableReferenceRule() {
		return getAstActorVariableReferenceAccess().getRule();
	}

	//AstConnectionAttribute:
	//	name=ID "=" value=AstExpression ";";
	public AstConnectionAttributeElements getAstConnectionAttributeAccess() {
		return (pAstConnectionAttribute != null) ? pAstConnectionAttribute : (pAstConnectionAttribute = new AstConnectionAttributeElements());
	}
	
	public ParserRule getAstConnectionAttributeRule() {
		return getAstConnectionAttributeAccess().getRule();
	}

	//AstConstantVariable returns AstVariable:
	//	AstVariableDeclaration constant?="=" value=AstExpression ";";
	public AstConstantVariableElements getAstConstantVariableAccess() {
		return (pAstConstantVariable != null) ? pAstConstantVariable : (pAstConstantVariable = new AstConstantVariableElements());
	}
	
	public ParserRule getAstConstantVariableRule() {
		return getAstConstantVariableAccess().getRule();
	}

	//AstExternalVariable returns AstVariable:
	//	"external" AstVariableDeclaration ";";
	public AstExternalVariableElements getAstExternalVariableAccess() {
		return (pAstExternalVariable != null) ? pAstExternalVariable : (pAstExternalVariable = new AstExternalVariableElements());
	}
	
	public ParserRule getAstExternalVariableRule() {
		return getAstExternalVariableAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////////////////////
	//// type definitions
	/////////////////////////////////////////////////////////////////////////////////
	//AstTypeDefinition returns AstTypeUser:
	//	definition?="type" name=ID ("(" (parameters+=AstTypeDefinitionParameter (","
	//	parameters+=AstTypeDefinitionParameter)*)? ")")? ":" (tuples+=AstTuple | tuples+=AstTaggedTuple ("|"
	//	tuples+=AstTaggedTuple)*) "end";
	public AstTypeDefinitionElements getAstTypeDefinitionAccess() {
		return (pAstTypeDefinition != null) ? pAstTypeDefinition : (pAstTypeDefinition = new AstTypeDefinitionElements());
	}
	
	public ParserRule getAstTypeDefinitionRule() {
		return getAstTypeDefinitionAccess().getRule();
	}

	//AstTypeDefinitionParameter:
	//	value=AstVariableDeclaration | type=AstTypeDefinitionTypeParameter;
	public AstTypeDefinitionParameterElements getAstTypeDefinitionParameterAccess() {
		return (pAstTypeDefinitionParameter != null) ? pAstTypeDefinitionParameter : (pAstTypeDefinitionParameter = new AstTypeDefinitionParameterElements());
	}
	
	public ParserRule getAstTypeDefinitionParameterRule() {
		return getAstTypeDefinitionParameterAccess().getRule();
	}

	//AstTypeDefinitionTypeParameter returns AstTypeUser:
	//	variable?="type" name=ID;
	public AstTypeDefinitionTypeParameterElements getAstTypeDefinitionTypeParameterAccess() {
		return (pAstTypeDefinitionTypeParameter != null) ? pAstTypeDefinitionTypeParameter : (pAstTypeDefinitionTypeParameter = new AstTypeDefinitionTypeParameterElements());
	}
	
	public ParserRule getAstTypeDefinitionTypeParameterRule() {
		return getAstTypeDefinitionTypeParameterAccess().getRule();
	}

	//AstTaggedTuple:
	//	name=ID ("(" (fields+=AstValuedVariableDeclaration ("," fields+=AstValuedVariableDeclaration)*)? ")")?;
	public AstTaggedTupleElements getAstTaggedTupleAccess() {
		return (pAstTaggedTuple != null) ? pAstTaggedTuple : (pAstTaggedTuple = new AstTaggedTupleElements());
	}
	
	public ParserRule getAstTaggedTupleRule() {
		return getAstTaggedTupleAccess().getRule();
	}

	//AstTuple returns AstTaggedTuple:
	//	{AstTuple} ("(" (fields+=AstValuedVariableDeclaration ("," fields+=AstValuedVariableDeclaration)*)? ")");
	public AstTupleElements getAstTupleAccess() {
		return (pAstTuple != null) ? pAstTuple : (pAstTuple = new AstTupleElements());
	}
	
	public ParserRule getAstTupleRule() {
		return getAstTupleAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////////////////////
	//// actor
	/////////////////////////////////////////////////////////////////////////////////
	//AstActor:
	//	{AstActor} "actor" name=ID "(" (parameters+=AstParameter ("," parameters+=AstParameter)*)? ")" (inputs+=AstPort (","
	//	inputs+=AstPort)*)? "==>" (outputs+=AstPort ("," outputs+=AstPort)*)? ":" (functions+=AstFunction |
	//	procedures+=AstProcedure | actions+=AstAction | initializes+=AstInitialize | stateVariables+=AstStateVariable |
	//	schedules+= // Only one is allowed, but that is checked later.
	//	AstSchedule | priorities+=AstPriority)* "end";
	public AstActorElements getAstActorAccess() {
		return (pAstActor != null) ? pAstActor : (pAstActor = new AstActorElements());
	}
	
	public ParserRule getAstActorRule() {
		return getAstActorAccess().getRule();
	}

	//AstPort:
	//	annotations+=AstAnnotation* type=AstType name=ID;
	public AstPortElements getAstPortAccess() {
		return (pAstPort != null) ? pAstPort : (pAstPort = new AstPortElements());
	}
	
	public ParserRule getAstPortRule() {
		return getAstPortAccess().getRule();
	}

	//AstFunction returns AstVariable:
	//	{AstFunction} annotations+=AstAnnotation* "function" name=ID "(" (parameters+=AstVariableDeclaration (","
	//	parameters+=AstVariableDeclaration)*)? ")" "-->" type=AstType ("var" variables+=AstValuedVariableDeclaration (","
	//	variables+=AstValuedVariableDeclaration)*)? ":" expression=AstExpression "end";
	public AstFunctionElements getAstFunctionAccess() {
		return (pAstFunction != null) ? pAstFunction : (pAstFunction = new AstFunctionElements());
	}
	
	public ParserRule getAstFunctionRule() {
		return getAstFunctionAccess().getRule();
	}

	//AstExternalFunction:
	//	{AstFunction} annotations+=AstAnnotation* "external" "function" name=ID "(" (parameters+=AstVariableDeclaration (","
	//	parameters+=AstVariableDeclaration)*)? ")" "-->" type=AstType ";";
	public AstExternalFunctionElements getAstExternalFunctionAccess() {
		return (pAstExternalFunction != null) ? pAstExternalFunction : (pAstExternalFunction = new AstExternalFunctionElements());
	}
	
	public ParserRule getAstExternalFunctionRule() {
		return getAstExternalFunctionAccess().getRule();
	}

	//AstProcedure:
	//	annotations+=AstAnnotation* "procedure" name=ID "(" (parameters+=AstVariableDeclaration (","
	//	parameters+=AstVariableDeclaration)*)? ")" ("var" variables+=AstValuedVariableDeclaration (","
	//	variables+=AstValuedVariableDeclaration)*)? "begin" statements+=AstStatement* "end";
	public AstProcedureElements getAstProcedureAccess() {
		return (pAstProcedure != null) ? pAstProcedure : (pAstProcedure = new AstProcedureElements());
	}
	
	public ParserRule getAstProcedureRule() {
		return getAstProcedureAccess().getRule();
	}

	//AstExternalProcedure:
	//	{AstProcedure} annotations+=AstAnnotation* "external" "procedure" name=ID "(" (parameters+=AstVariableDeclaration (","
	//	parameters+=AstVariableDeclaration)*)? ")" ";";
	public AstExternalProcedureElements getAstExternalProcedureAccess() {
		return (pAstExternalProcedure != null) ? pAstExternalProcedure : (pAstExternalProcedure = new AstExternalProcedureElements());
	}
	
	public ParserRule getAstExternalProcedureRule() {
		return getAstExternalProcedureAccess().getRule();
	}

	//AstParameter returns AstVariable:
	//	AstVariableDeclaration ("=" value=AstExpression)?;
	public AstParameterElements getAstParameterAccess() {
		return (pAstParameter != null) ? pAstParameter : (pAstParameter = new AstParameterElements());
	}
	
	public ParserRule getAstParameterRule() {
		return getAstParameterAccess().getRule();
	}

	//AstStateVariable returns AstVariable:
	//	AstValuedVariableDeclaration ";";
	public AstStateVariableElements getAstStateVariableAccess() {
		return (pAstStateVariable != null) ? pAstStateVariable : (pAstStateVariable = new AstStateVariableElements());
	}
	
	public ParserRule getAstStateVariableRule() {
		return getAstStateVariableAccess().getRule();
	}

	//AstTag:
	//	identifiers+=ID ("." identifiers+=ID)*;
	public AstTagElements getAstTagAccess() {
		return (pAstTag != null) ? pAstTag : (pAstTag = new AstTagElements());
	}
	
	public ParserRule getAstTagRule() {
		return getAstTagAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////////////////////
	//// external entities
	/////////////////////////////////////////////////////////////////////////////////
	//AstExternalActor:
	//	{AstExternalActor} "external" "actor" name=ID "(" (parameters+=AstParameter ("," parameters+=AstParameter)*)? ")"
	//	(inputs+=AstPort ("," inputs+=AstPort)*)? "==>" (outputs+=AstPort ("," outputs+=AstPort)*)? ";";
	public AstExternalActorElements getAstExternalActorAccess() {
		return (pAstExternalActor != null) ? pAstExternalActor : (pAstExternalActor = new AstExternalActorElements());
	}
	
	public ParserRule getAstExternalActorRule() {
		return getAstExternalActorAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////////////////////
	//// priorities
	/////////////////////////////////////////////////////////////////////////////////
	//AstInequality:
	//	tags+=AstTag (">" tags+=AstTag)+ ";";
	public AstInequalityElements getAstInequalityAccess() {
		return (pAstInequality != null) ? pAstInequality : (pAstInequality = new AstInequalityElements());
	}
	
	public ParserRule getAstInequalityRule() {
		return getAstInequalityAccess().getRule();
	}

	//AstPriority:
	//	{AstPriority} "priority" inequalities+=AstInequality* "end";
	public AstPriorityElements getAstPriorityAccess() {
		return (pAstPriority != null) ? pAstPriority : (pAstPriority = new AstPriorityElements());
	}
	
	public ParserRule getAstPriorityRule() {
		return getAstPriorityAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////////////////////
	//// schedule
	/////////////////////////////////////////////////////////////////////////////////
	//AstSchedule:
	//	"schedule" "fsm" initialState=[AstState] ":" transitions+=AstTransition* "end";
	public AstScheduleElements getAstScheduleAccess() {
		return (pAstSchedule != null) ? pAstSchedule : (pAstSchedule = new AstScheduleElements());
	}
	
	public ParserRule getAstScheduleRule() {
		return getAstScheduleAccess().getRule();
	}

	//AstTransition:
	//	source=[AstState] "(" tags+=AstTag ("," tags+=AstTag)* ")" "-->" target=[AstState] ";";
	public AstTransitionElements getAstTransitionAccess() {
		return (pAstTransition != null) ? pAstTransition : (pAstTransition = new AstTransitionElements());
	}
	
	public ParserRule getAstTransitionRule() {
		return getAstTransitionAccess().getRule();
	}

	//AstState:
	//	name=ID;
	public AstStateElements getAstStateAccess() {
		return (pAstState != null) ? pAstState : (pAstState = new AstStateElements());
	}
	
	public ParserRule getAstStateRule() {
		return getAstStateAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////////////////////
	//// actions
	/////////////////////////////////////////////////////////////////////////////////
	//AstAction:
	//	{AstAction} annotations+=AstAnnotation* (tag=AstTag ":")? "action" (inputs+=AstInputPattern (","
	//	inputs+=AstInputPattern)*)? "==>" (outputs+=AstOutputPattern ("," outputs+=AstOutputPattern)*)? ("guard"
	//	guards+=AstExpression ("," guards+=AstExpression)*)? ("var" variables+=AstValuedVariableDeclaration (","
	//	variables+=AstValuedVariableDeclaration)*)? ("do" statements+=AstStatement*)? "end";
	public AstActionElements getAstActionAccess() {
		return (pAstAction != null) ? pAstAction : (pAstAction = new AstActionElements());
	}
	
	public ParserRule getAstActionRule() {
		return getAstActionAccess().getRule();
	}

	//AstInitialize returns AstAction:
	//	{AstInitialize} annotations+=AstAnnotation* (tag=AstTag ":")? "initialize" "==>" (outputs+=AstOutputPattern (","
	//	outputs+=AstOutputPattern)*)? ("guard" guards+=AstExpression ("," guards+=AstExpression)*)? ("var"
	//	variables+=AstValuedVariableDeclaration ("," variables+=AstValuedVariableDeclaration)*)? ("do"
	//	statements+=AstStatement*)? "end";
	public AstInitializeElements getAstInitializeAccess() {
		return (pAstInitialize != null) ? pAstInitialize : (pAstInitialize = new AstInitializeElements());
	}
	
	public ParserRule getAstInitializeRule() {
		return getAstInitializeAccess().getRule();
	}

	//AstInputPattern:
	//	(port=[AstPort] ":")? "[" tokens+=AstToken ("," tokens+=AstToken)* "]" ("repeat" repeat=AstExpression)?;
	public AstInputPatternElements getAstInputPatternAccess() {
		return (pAstInputPattern != null) ? pAstInputPattern : (pAstInputPattern = new AstInputPatternElements());
	}
	
	public ParserRule getAstInputPatternRule() {
		return getAstInputPatternAccess().getRule();
	}

	//AstToken returns AstVariable:
	//	name=ID;
	public AstTokenElements getAstTokenAccess() {
		return (pAstToken != null) ? pAstToken : (pAstToken = new AstTokenElements());
	}
	
	public ParserRule getAstTokenRule() {
		return getAstTokenAccess().getRule();
	}

	//AstOutputPattern:
	//	(port=[AstPort] ":")? "[" values+=AstExpression ("," values+=AstExpression)* "]" ("repeat" repeat=AstExpression)?;
	public AstOutputPatternElements getAstOutputPatternAccess() {
		return (pAstOutputPattern != null) ? pAstOutputPattern : (pAstOutputPattern = new AstOutputPatternElements());
	}
	
	public ParserRule getAstOutputPatternRule() {
		return getAstOutputPatternAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////////////////////
	//// statements
	/////////////////////////////////////////////////////////////////////////////////
	//AstStatementAssign:
	//	target=[AstVariable] ("[" indexes+=AstExpression "]")* member+=AstMemberAccess* ":=" value=AstExpression ";";
	public AstStatementAssignElements getAstStatementAssignAccess() {
		return (pAstStatementAssign != null) ? pAstStatementAssign : (pAstStatementAssign = new AstStatementAssignElements());
	}
	
	public ParserRule getAstStatementAssignRule() {
		return getAstStatementAssignAccess().getRule();
	}

	//AstStatementCall:
	//	procedure=[AstProcedure] "(" (parameters+=AstExpression ("," parameters+=AstExpression)*)? ")" ";";
	public AstStatementCallElements getAstStatementCallAccess() {
		return (pAstStatementCall != null) ? pAstStatementCall : (pAstStatementCall = new AstStatementCallElements());
	}
	
	public ParserRule getAstStatementCallRule() {
		return getAstStatementCallAccess().getRule();
	}

	//AstStatementForeach:
	//	"foreach" generators+=AstForeachGenerator ("," generators+=AstForeachGenerator)* ("var"
	//	variables+=AstValuedVariableDeclaration ("," variables+=AstValuedVariableDeclaration)*)? "do"
	//	statements+=AstStatement* "end";
	public AstStatementForeachElements getAstStatementForeachAccess() {
		return (pAstStatementForeach != null) ? pAstStatementForeach : (pAstStatementForeach = new AstStatementForeachElements());
	}
	
	public ParserRule getAstStatementForeachRule() {
		return getAstStatementForeachAccess().getRule();
	}

	//AstForeachGenerator:
	//	variable=AstVariableDeclaration "in" expression=AstExpression;
	public AstForeachGeneratorElements getAstForeachGeneratorAccess() {
		return (pAstForeachGenerator != null) ? pAstForeachGenerator : (pAstForeachGenerator = new AstForeachGeneratorElements());
	}
	
	public ParserRule getAstForeachGeneratorRule() {
		return getAstForeachGeneratorAccess().getRule();
	}

	//AstStatementBlock:
	//	{AstStatementBlock} "begin" ("var" variables+=AstValuedVariableDeclaration (","
	//	variables+=AstValuedVariableDeclaration)* "do")? statements+=AstStatement* "end";
	public AstStatementBlockElements getAstStatementBlockAccess() {
		return (pAstStatementBlock != null) ? pAstStatementBlock : (pAstStatementBlock = new AstStatementBlockElements());
	}
	
	public ParserRule getAstStatementBlockRule() {
		return getAstStatementBlockAccess().getRule();
	}

	//AstStatementIf:
	//	"if" condition=AstExpression "then" then+=AstStatement* ("else" else+=AstStatement*)? "end";
	public AstStatementIfElements getAstStatementIfAccess() {
		return (pAstStatementIf != null) ? pAstStatementIf : (pAstStatementIf = new AstStatementIfElements());
	}
	
	public ParserRule getAstStatementIfRule() {
		return getAstStatementIfAccess().getRule();
	}

	//AstStatementWhile:
	//	"while" condition=AstExpression "do" statements+=AstStatement* "end";
	public AstStatementWhileElements getAstStatementWhileAccess() {
		return (pAstStatementWhile != null) ? pAstStatementWhile : (pAstStatementWhile = new AstStatementWhileElements());
	}
	
	public ParserRule getAstStatementWhileRule() {
		return getAstStatementWhileAccess().getRule();
	}

	//AstStatement:
	//	AstStatementAssign | AstStatementCall | AstStatementForeach | AstStatementIf | AstStatementWhile | AstStatementBlock;
	public AstStatementElements getAstStatementAccess() {
		return (pAstStatement != null) ? pAstStatement : (pAstStatement = new AstStatementElements());
	}
	
	public ParserRule getAstStatementRule() {
		return getAstStatementAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////////////////////
	//// expressions
	/////////////////////////////////////////////////////////////////////////////////
	//AstExpression:
	//	AstExpressionAnd ({AstExpressionBinary.left=current} operator=("||" | "or" | "..") right=AstExpressionAnd)*;
	public AstExpressionElements getAstExpressionAccess() {
		return (pAstExpression != null) ? pAstExpression : (pAstExpression = new AstExpressionElements());
	}
	
	public ParserRule getAstExpressionRule() {
		return getAstExpressionAccess().getRule();
	}

	//AstExpressionAnd returns AstExpression:
	//	AstExpressionBitor ({AstExpressionBinary.left=current} operator=("&&" | "and") right=AstExpressionBitor)*;
	public AstExpressionAndElements getAstExpressionAndAccess() {
		return (pAstExpressionAnd != null) ? pAstExpressionAnd : (pAstExpressionAnd = new AstExpressionAndElements());
	}
	
	public ParserRule getAstExpressionAndRule() {
		return getAstExpressionAndAccess().getRule();
	}

	//AstExpressionBitor returns AstExpression:
	//	AstExpressionBitxor ({AstExpressionBinary.left=current} operator="|" right=AstExpressionBitxor)*;
	public AstExpressionBitorElements getAstExpressionBitorAccess() {
		return (pAstExpressionBitor != null) ? pAstExpressionBitor : (pAstExpressionBitor = new AstExpressionBitorElements());
	}
	
	public ParserRule getAstExpressionBitorRule() {
		return getAstExpressionBitorAccess().getRule();
	}

	//AstExpressionBitxor returns AstExpression:
	//	AstExpressionBitand ({AstExpressionBinary.left=current} operator="^" right=AstExpressionBitand)*;
	public AstExpressionBitxorElements getAstExpressionBitxorAccess() {
		return (pAstExpressionBitxor != null) ? pAstExpressionBitxor : (pAstExpressionBitxor = new AstExpressionBitxorElements());
	}
	
	public ParserRule getAstExpressionBitxorRule() {
		return getAstExpressionBitxorAccess().getRule();
	}

	//AstExpressionBitand returns AstExpression:
	//	AstExpressionEq ({AstExpressionBinary.left=current} operator="&" right=AstExpressionEq)*;
	public AstExpressionBitandElements getAstExpressionBitandAccess() {
		return (pAstExpressionBitand != null) ? pAstExpressionBitand : (pAstExpressionBitand = new AstExpressionBitandElements());
	}
	
	public ParserRule getAstExpressionBitandRule() {
		return getAstExpressionBitandAccess().getRule();
	}

	//AstExpressionEq returns AstExpression:
	//	AstExpressionRelational ({AstExpressionBinary.left=current} operator=("=" | "!=") right=AstExpressionRelational)*;
	public AstExpressionEqElements getAstExpressionEqAccess() {
		return (pAstExpressionEq != null) ? pAstExpressionEq : (pAstExpressionEq = new AstExpressionEqElements());
	}
	
	public ParserRule getAstExpressionEqRule() {
		return getAstExpressionEqAccess().getRule();
	}

	//AstExpressionRelational returns AstExpression:
	//	AstExpressionShift ({AstExpressionBinary.left=current} operator=("<" | "<=" | ">" | ">=") right=AstExpressionShift)*;
	public AstExpressionRelationalElements getAstExpressionRelationalAccess() {
		return (pAstExpressionRelational != null) ? pAstExpressionRelational : (pAstExpressionRelational = new AstExpressionRelationalElements());
	}
	
	public ParserRule getAstExpressionRelationalRule() {
		return getAstExpressionRelationalAccess().getRule();
	}

	//AstExpressionShift returns AstExpression:
	//	AstExpressionAdditive ({AstExpressionBinary.left=current} operator=("<<" | ">>" | ">>>")
	//	right=AstExpressionAdditive)*;
	public AstExpressionShiftElements getAstExpressionShiftAccess() {
		return (pAstExpressionShift != null) ? pAstExpressionShift : (pAstExpressionShift = new AstExpressionShiftElements());
	}
	
	public ParserRule getAstExpressionShiftRule() {
		return getAstExpressionShiftAccess().getRule();
	}

	//AstExpressionAdditive returns AstExpression:
	//	AstExpressionMultiplicative ({AstExpressionBinary.left=current} operator=("+" | "-")
	//	right=AstExpressionMultiplicative)*;
	public AstExpressionAdditiveElements getAstExpressionAdditiveAccess() {
		return (pAstExpressionAdditive != null) ? pAstExpressionAdditive : (pAstExpressionAdditive = new AstExpressionAdditiveElements());
	}
	
	public ParserRule getAstExpressionAdditiveRule() {
		return getAstExpressionAdditiveAccess().getRule();
	}

	//AstExpressionMultiplicative returns AstExpression:
	//	AstExpressionExp ({AstExpressionBinary.left=current} operator=("*" | "/" | "div" | "mod") right=AstExpressionExp)*;
	public AstExpressionMultiplicativeElements getAstExpressionMultiplicativeAccess() {
		return (pAstExpressionMultiplicative != null) ? pAstExpressionMultiplicative : (pAstExpressionMultiplicative = new AstExpressionMultiplicativeElements());
	}
	
	public ParserRule getAstExpressionMultiplicativeRule() {
		return getAstExpressionMultiplicativeAccess().getRule();
	}

	//AstExpressionExp returns AstExpression:
	//	AstExpressionUnary ({AstExpressionBinary.left=current} operator="**" right=AstExpressionUnary)*;
	public AstExpressionExpElements getAstExpressionExpAccess() {
		return (pAstExpressionExp != null) ? pAstExpressionExp : (pAstExpressionExp = new AstExpressionExpElements());
	}
	
	public ParserRule getAstExpressionExpRule() {
		return getAstExpressionExpAccess().getRule();
	}

	//AstExpressionUnary returns AstExpression:
	//	{AstExpressionUnary} unaryOperator=("~" | "-" | "not" | "#" | "old") expression=AstExpressionPostfix |
	//	AstExpressionPostfix;
	public AstExpressionUnaryElements getAstExpressionUnaryAccess() {
		return (pAstExpressionUnary != null) ? pAstExpressionUnary : (pAstExpressionUnary = new AstExpressionUnaryElements());
	}
	
	public ParserRule getAstExpressionUnaryRule() {
		return getAstExpressionUnaryAccess().getRule();
	}

	//AstExpressionPostfix returns AstExpression:
	//	AstExpressionList | AstExpressionSymbolReference | AstExpressionIf | AstExpressionLiteral | "(" AstExpression ")";
	public AstExpressionPostfixElements getAstExpressionPostfixAccess() {
		return (pAstExpressionPostfix != null) ? pAstExpressionPostfix : (pAstExpressionPostfix = new AstExpressionPostfixElements());
	}
	
	public ParserRule getAstExpressionPostfixRule() {
		return getAstExpressionPostfixAccess().getRule();
	}

	//AstExpressionSymbolReference:
	//	symbol=[AstVariable] ("[" indexes+=AstExpression "]")* member+=AstMemberAccess* ("::" ctor=ID)? (call?="("
	//	(parameters+=AstExpression ("," parameters+=AstExpression)*)? ")")?;
	public AstExpressionSymbolReferenceElements getAstExpressionSymbolReferenceAccess() {
		return (pAstExpressionSymbolReference != null) ? pAstExpressionSymbolReference : (pAstExpressionSymbolReference = new AstExpressionSymbolReferenceElements());
	}
	
	public ParserRule getAstExpressionSymbolReferenceRule() {
		return getAstExpressionSymbolReferenceAccess().getRule();
	}

	//AstExpressionIf:
	//	"if" condition=AstExpression "then" then=AstExpression "else" else=AstExpression "end";
	public AstExpressionIfElements getAstExpressionIfAccess() {
		return (pAstExpressionIf != null) ? pAstExpressionIf : (pAstExpressionIf = new AstExpressionIfElements());
	}
	
	public ParserRule getAstExpressionIfRule() {
		return getAstExpressionIfAccess().getRule();
	}

	//AstExpressionList:
	//	"[" expressions+=AstExpression ("," expressions+=AstExpression)* (":" generators+=AstGenerator (","
	//	generators+=AstGenerator)*)? "]";
	public AstExpressionListElements getAstExpressionListAccess() {
		return (pAstExpressionList != null) ? pAstExpressionList : (pAstExpressionList = new AstExpressionListElements());
	}
	
	public ParserRule getAstExpressionListRule() {
		return getAstExpressionListAccess().getRule();
	}

	//AstGenerator:
	//	"for" variable=AstVariableDeclaration "in" expression=AstExpression;
	public AstGeneratorElements getAstGeneratorAccess() {
		return (pAstGenerator != null) ? pAstGenerator : (pAstGenerator = new AstGeneratorElements());
	}
	
	public ParserRule getAstGeneratorRule() {
		return getAstGeneratorAccess().getRule();
	}

	////AstExpressionVariable: value=[AstVariable] ('[' indexes += AstExpression ']')* (member += AstMemberAccess)*;
	/////////////////////////////////////////////////////////////////////////////////
	//// literal expressions
	/////////////////////////////////////////////////////////////////////////////////
	//AstExpressionLiteral:
	//	AstExpressionBoolean | AstExpressionFloat | AstExpressionInteger | AstExpressionString;
	public AstExpressionLiteralElements getAstExpressionLiteralAccess() {
		return (pAstExpressionLiteral != null) ? pAstExpressionLiteral : (pAstExpressionLiteral = new AstExpressionLiteralElements());
	}
	
	public ParserRule getAstExpressionLiteralRule() {
		return getAstExpressionLiteralAccess().getRule();
	}

	//AstExpressionBoolean:
	//	value=BOOL;
	public AstExpressionBooleanElements getAstExpressionBooleanAccess() {
		return (pAstExpressionBoolean != null) ? pAstExpressionBoolean : (pAstExpressionBoolean = new AstExpressionBooleanElements());
	}
	
	public ParserRule getAstExpressionBooleanRule() {
		return getAstExpressionBooleanAccess().getRule();
	}

	//terminal BOOL returns ecore::EBoolean:
	//	"true" | "false";
	public TerminalRule getBOOLRule() {
		return (tBOOL != null) ? tBOOL : (tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL"));
	} 

	//AstExpressionFloat:
	//	value=REAL;
	public AstExpressionFloatElements getAstExpressionFloatAccess() {
		return (pAstExpressionFloat != null) ? pAstExpressionFloat : (pAstExpressionFloat = new AstExpressionFloatElements());
	}
	
	public ParserRule getAstExpressionFloatRule() {
		return getAstExpressionFloatAccess().getRule();
	}

	//REAL returns ecore::EFloat hidden():
	//	INT "." (EXP_INT | INT) | "." (EXP_INT | INT);
	public REALElements getREALAccess() {
		return (pREAL != null) ? pREAL : (pREAL = new REALElements());
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}

	//AstExpressionInteger:
	//	value=(INT | EXP_INT | HEX);
	public AstExpressionIntegerElements getAstExpressionIntegerAccess() {
		return (pAstExpressionInteger != null) ? pAstExpressionInteger : (pAstExpressionInteger = new AstExpressionIntegerElements());
	}
	
	public ParserRule getAstExpressionIntegerRule() {
		return getAstExpressionIntegerAccess().getRule();
	}

	//terminal EXP_INT returns ecore::ELong:
	//	INT ("e" | "E") ("-" | "+")? INT;
	public TerminalRule getEXP_INTRule() {
		return (tEXP_INT != null) ? tEXP_INT : (tEXP_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXP_INT"));
	} 

	//terminal HEX returns ecore::ELong:
	//	"0" ("x" | "X") ("0".."9" | "a".."f" | "A".."F")+;
	public TerminalRule getHEXRule() {
		return (tHEX != null) ? tHEX : (tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX"));
	} 

	//terminal INT returns ecore::ELong:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//AstExpressionString:
	//	value=STRING;
	public AstExpressionStringElements getAstExpressionStringAccess() {
		return (pAstExpressionString != null) ? pAstExpressionString : (pAstExpressionString = new AstExpressionStringElements());
	}
	
	public ParserRule getAstExpressionStringRule() {
		return getAstExpressionStringAccess().getRule();
	}

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z" | "_" | "$") ("a".."z" | "A".."Z" | "0".."9" | "_" | "$")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	/////////////////////////////////////////////////////////////////////////////////
	//// type and variable declarations
	/////////////////////////////////////////////////////////////////////////////////
	////AstTypeUser returns AstVariable: {AstTypeUser} ID | AstTypeBuiltIn;
	//AstTypeUser returns AstVariable:
	//	{AstTypeUser} ID;
	public AstTypeUserElements getAstTypeUserAccess() {
		return (pAstTypeUser != null) ? pAstTypeUser : (pAstTypeUser = new AstTypeUserElements());
	}
	
	public ParserRule getAstTypeUserRule() {
		return getAstTypeUserAccess().getRule();
	}

	//AstTypeBuiltIn:
	//	"int" | "uint" | "float" | "bool" | "List" | "string" | "byte" | "short";
	public AstTypeBuiltInElements getAstTypeBuiltInAccess() {
		return (pAstTypeBuiltIn != null) ? pAstTypeBuiltIn : (pAstTypeBuiltIn = new AstTypeBuiltInElements());
	}
	
	public ParserRule getAstTypeBuiltInRule() {
		return getAstTypeBuiltInAccess().getRule();
	}

	//AstType:
	//	{AstType} (builtin=AstTypeBuiltIn typeParams=AstTypeParameterList? ("[" dimensions+=AstExpression "]")* |
	//	name=[AstTypeUser] typeParams=AstTypeParameterList? ("[" dimensions+=AstExpression "]")* | "[" (domain+=AstType (","
	//	domain+=AstType)*)? "-->" (codomain+=AstType ("," domain+=AstType)*)? "]");
	public AstTypeElements getAstTypeAccess() {
		return (pAstType != null) ? pAstType : (pAstType = new AstTypeElements());
	}
	
	public ParserRule getAstTypeRule() {
		return getAstTypeAccess().getRule();
	}

	//AstTypeParameterList:
	//	"(" params+=AstTypeParam ("," params+=AstTypeParam)* ")";
	public AstTypeParameterListElements getAstTypeParameterListAccess() {
		return (pAstTypeParameterList != null) ? pAstTypeParameterList : (pAstTypeParameterList = new AstTypeParameterListElements());
	}
	
	public ParserRule getAstTypeParameterListRule() {
		return getAstTypeParameterListAccess().getRule();
	}

	//AstTypeParam:
	//	name=ID "=" value=AstExpression | name=(ID | "type") ":" type=AstType;
	public AstTypeParamElements getAstTypeParamAccess() {
		return (pAstTypeParam != null) ? pAstTypeParam : (pAstTypeParam = new AstTypeParamElements());
	}
	
	public ParserRule getAstTypeParamRule() {
		return getAstTypeParamAccess().getRule();
	}

	//AstVariableDeclaration returns AstVariable:
	//	annotations+=AstAnnotation* type=AstType name=ID ("[" dimensions+=AstExpression "]")*;
	public AstVariableDeclarationElements getAstVariableDeclarationAccess() {
		return (pAstVariableDeclaration != null) ? pAstVariableDeclaration : (pAstVariableDeclaration = new AstVariableDeclarationElements());
	}
	
	public ParserRule getAstVariableDeclarationRule() {
		return getAstVariableDeclarationAccess().getRule();
	}

	//AstValuedVariableDeclaration returns AstVariable:
	//	AstVariableDeclaration ((constant?="=" | ":=") value=AstExpression)?;
	public AstValuedVariableDeclarationElements getAstValuedVariableDeclarationAccess() {
		return (pAstValuedVariableDeclaration != null) ? pAstValuedVariableDeclaration : (pAstValuedVariableDeclaration = new AstValuedVariableDeclarationElements());
	}
	
	public ParserRule getAstValuedVariableDeclarationRule() {
		return getAstValuedVariableDeclarationAccess().getRule();
	}

	//AstMemberAccess:
	//	"." name=ID ("[" memberIndex+=AstExpression "]")*;
	public AstMemberAccessElements getAstMemberAccessAccess() {
		return (pAstMemberAccess != null) ? pAstMemberAccess : (pAstMemberAccess = new AstMemberAccessElements());
	}
	
	public ParserRule getAstMemberAccessRule() {
		return getAstMemberAccessAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////////////////////
	//// annotations
	/////////////////////////////////////////////////////////////////////////////////
	//AstAnnotation:
	//	"@" name=ID ("(" arguments+=AstAnnotationArgument ("," arguments+=AstAnnotationArgument)* ")")?;
	public AstAnnotationElements getAstAnnotationAccess() {
		return (pAstAnnotation != null) ? pAstAnnotation : (pAstAnnotation = new AstAnnotationElements());
	}
	
	public ParserRule getAstAnnotationRule() {
		return getAstAnnotationAccess().getRule();
	}

	//AstAnnotationArgument:
	//	name=ID "=" value=STRING;
	public AstAnnotationArgumentElements getAstAnnotationArgumentAccess() {
		return (pAstAnnotationArgument != null) ? pAstAnnotationArgument : (pAstAnnotationArgument = new AstAnnotationArgumentElements());
	}
	
	public ParserRule getAstAnnotationArgumentRule() {
		return getAstAnnotationArgumentAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////////////////////
	//// hidden symbols
	/////////////////////////////////////////////////////////////////////////////////        
	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
